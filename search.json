[{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to lancer","title":"Contributing to lancer","text":"First , thanks considering contributing lancer 😄! hope found tool useful work 😀 apologise mishaps 😣 along way. lancer open source project, maintained people care.","code":""},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"acknowledgements-","dir":"","previous_headings":"","what":"Acknowledgements 😌","title":"Contributing to lancer","text":"contributing file based template Peter Desmet released CC0.","code":""},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"versioning-","dir":"","previous_headings":"","what":"Versioning 🔢","title":"Contributing to lancer","text":"Refer NEWS.md file see worked well update changes back back versions. Software version numbers indicate following: MAJOR.MINOR.PATCH.DEVELOPMENT. key steps keep mind: major version number generally increase unless changes made affect large group. Examples moving software new repository, changes API, etc… new features added (re)moved, typically increase minor version number. Minimal, non breaking changes bug fixes indicated increasing patch version number. Examples minimal changes updating documentations, fixing typo software output Current development versions packages (.e. main branch GitHub) additionally development version number. development version number typically 9000","code":""},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"code-of-conduct-","dir":"","previous_headings":"","what":"Code of conduct 👩‍🏫","title":"Contributing to lancer","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"improve-the-documentation-","dir":"","previous_headings":"","what":"Improve the documentation 📚","title":"Contributing to lancer","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"Improve the documentation 📚","what":"Function documentation","title":"Contributing to lancer","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file name function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"contribute-code-","dir":"","previous_headings":"","what":"Contribute code 📝","title":"Contributing to lancer","text":"Care fix bugs 🐛 implement new functionality lancer? Great👏! Thank volunteering time help . look issue list leave comment things want work . See also development guidelines .","code":""},{"path":[]},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"readme-documentation","dir":"","previous_headings":"Development guidelines 👨‍💻","what":"README Documentation","title":"Contributing to lancer","text":"README documentation, Rmarkdown used together R RStudio IDE. useful resources. * https://www.rstudio.com/resources/webinars/getting-started--r-markdown/ * https://rmarkdown.rstudio.com/github_document_format.html RStudio used friendly user interface (button clicks command lines) create markdown html document use git. Based past experiences, easier guide beginners create html documents use git using RStudio pure command line. addition, people lab uses R. efforts made R Data Science Online Learning Community, created learning environment via Slack account make beginners comfortable ask question share R, RStudio, Rmarkdown, Git GitHub issues. Give try make learning experience R, Statistics, Git GitHub fruitful experience worth sharing.","code":""},{"path":"https://slinghub.github.io/lancer/CONTRIBUTING.html","id":"github-workflow","dir":"","previous_headings":"Development guidelines 👨‍💻","what":"GitHub Workflow","title":"Contributing to lancer","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream main. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests) . Document code others can understand. Check code devtools::check() aim 0 errors warnings. Commit push changes. Submit pull request.","code":""},{"path":"https://slinghub.github.io/lancer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Jeremy Selva Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://slinghub.github.io/lancer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeremy Selva. Author, maintainer. Federico Torta. Author. Bo Burla. Author. Markus Wenk. Author.","code":""},{"path":"https://slinghub.github.io/lancer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Selva J, Torta F, Burla B, Wenk M (2022). lancer: Linearity Assessment Curve Explorer. https://slinghub.github.io/lancer/, https://github.com/SLINGhub/lancer.","code":"@Manual{,   title = {lancer: Linearity Assessment and Curve Explorer},   author = {Jeremy Selva and Federico Torta and Bo Burla and Markus Wenk},   year = {2022},   note = {https://slinghub.github.io/lancer/, https://github.com/SLINGhub/lancer}, }"},{"path":"https://slinghub.github.io/lancer/index.html","id":"lancer-linearity-assessment---and-curve-explorer","dir":"","previous_headings":"","what":"Linearity Assessment and Curve Explorer","title":"Linearity Assessment and Curve Explorer","text":"R package used validate curve linear signal suppression statistical analysis plots.","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of Content","title":"Linearity Assessment and Curve Explorer","text":"Installation Meta Overview Motivation Works Workflow Proposed Usage Output Results","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Linearity Assessment and Curve Explorer","text":"can install development version GitHub : want use proper release version, referenced Git tag (example: 0.0.5) install package follows: Back top","code":"# install.packages(\"devtools\") devtools::install_github(\"SLINGhub/lancer\") devtools::install_github(\"SLINGhub/lancer\", ref = \"0.0.5\")"},{"path":"https://slinghub.github.io/lancer/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Linearity Assessment and Curve Explorer","text":"welcome contributions general questions bug reports. Check contributions guidelines. Please note project released Contributor Code Conduct. participating project agree abide terms. License: MIT Think lancer useful? Let others discover , telling person, via Twitter  blog post. Refer NEWS.md file see worked well update changes back back versions. Black Knight J4p4n 1001FreeDownloads released CC0. Mountain Range publicdomainvectors.org released CC0. Back top","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Linearity Assessment and Curve Explorer","text":"Using dilution data running example, overview workflow follows  Back top","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Linearity Assessment and Curve Explorer","text":"Pearson correlation coefficient used widely test linearity. However, insufficient indicated Francisco Raposo (2016) Consider linear curve, saturated curve curve limit detection (LOD)   corresponding Pearson correlation coefficient really high (>0.9) even though curves non-linear. need explore better ways categorise two curves. One example use Percent Residual Accuracy found Logue, B. . Manandhar, E. (2018) sensitive Pearson correlation coefficient. Observe linear dilution curve gives higher value compared two curves. Another example use Mandel’s Fitting Test. Observe two non-linear dilution curves give low p value. Back top","code":"linear_data <- data.frame(   conc_var = c(     10, 25, 40, 50, 60,     75, 80, 100, 125, 150   ),   signal_var = c(     25463, 63387, 90624, 131274, 138069,     205353, 202407, 260205, 292257, 367924   ) )  saturated_data <- data.frame(   conc_var = c(     10, 25, 40, 50, 60,     75, 80, 100, 125, 150   ),   signal_var = c(     5192648, 16594991, 32507833, 46499896,     55388856, 62505210, 62778078, 72158161,     78044338, 86158414   ) )  lod_data <- data.frame(   conc_var = c(     10, 25, 40, 50, 60,     75, 80, 100, 125, 150   ),   signal_var = c(     500, 903, 1267, 2031, 2100,     3563, 4500, 5300, 8500, 10430   ) ) cor(linear_data$conc_var, linear_data$signal_var) #> [1] 0.9948151 cor(saturated_data$conc_var, saturated_data$signal_var) #> [1] 0.9500072 cor(lod_data$conc_var, lod_data$signal_var) #> [1] 0.9779585 lancer::calculate_pra_linear(   dilution_data = linear_data,   conc_var = \"conc_var\",   signal_var = \"signal_var\" ) #> [1] 94.32046 lancer::calculate_pra_linear(   dilution_data = saturated_data,   conc_var = \"conc_var\",   signal_var = \"signal_var\" ) #> [1] 62.30351 lancer::calculate_pra_linear(   dilution_data = lod_data,   conc_var = \"conc_var\",   signal_var = \"signal_var\" ) #> [1] 74.69452 lancer::calculate_mandel(   dilution_data = linear_data,   conc_var = \"conc_var\",   signal_var = \"signal_var\" ) #> # A tibble: 1 × 2 #>   mandel_stats mandel_p_val #>          <dbl>        <dbl> #> 1        0.868        0.382 lancer::calculate_mandel(   dilution_data = saturated_data,   conc_var = \"conc_var\",   signal_var = \"signal_var\" ) #> # A tibble: 1 × 2 #>   mandel_stats mandel_p_val #>          <dbl>        <dbl> #> 1         52.9     0.000166 lancer::calculate_mandel(   dilution_data = lod_data,   conc_var = \"conc_var\",   signal_var = \"signal_var\" ) #> # A tibble: 1 × 2 #>   mandel_stats mandel_p_val #>          <dbl>        <dbl> #> 1         20.9      0.00256"},{"path":"https://slinghub.github.io/lancer/index.html","id":"how-it-works","dir":"","previous_headings":"","what":"How It Works","title":"Linearity Assessment and Curve Explorer","text":"try categorise dilution curves based results three parameters. Pearson Correlation Coefficient ( R ) Percent Residual Accuracy ( PRA ) Mandel’s Fitting Test Pearson Correlation Coefficient ( R ) can found Van Loco, J., Elskens, M., Croux, C. et al., Linearity calibration curves: use misuse correlation coefficient. Accreditation Quality Assurance 7, 281-285 (2002). 10.1007/s00769-002-0487-6. Equation ( 1 ) used. Mandel’s Fitting Test can found Andrade, J. M. Gómez-Carracedo, M. P., Notes use Mandel’s test check nonlinearity laboratory calibrations. Analytical Methods 5, 1145-1149 (2013). 10.1039/C2AY26400E. Equation ( 5 ) used. Percent Residual Accuracy ( PRA ) can found Logue, B. . Manandhar, E., Percent residual accuracy quantifying goodness--fit linear calibration curves. Talanta 189, 527-533 (2018). 10.1016/j.talanta.2018.07.046. Equation ( 6 ) used. Back top","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"workflow-proposed","dir":"","previous_headings":"","what":"Workflow Proposed","title":"Linearity Assessment and Curve Explorer","text":"Two methods proposed categorise dilution curves.","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"workflow-1","dir":"","previous_headings":"Workflow Proposed","what":"Workflow 1","title":"Linearity Assessment and Curve Explorer","text":"Workflow 1 involves using R PRA categorise dilution curves. R < 0.8, classify poor linearity. R ≥ 0.8, PRA < 80, classify poor linearity. R ≥ 0.8, PRA ≥ 80, classify good linearity.","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"workflow-2","dir":"","previous_headings":"Workflow Proposed","what":"Workflow 2","title":"Linearity Assessment and Curve Explorer","text":"Workflow 2 involves using R, PRA Mandel’s Fitting Test categorise dilution curves. R < 0.8, classify poor linearity. better, classify poor linearity concavity negative, classify saturation regime concavity positive, classify noise regime R ≥ 0.8, PRA ≥ 80, classify good linearity Back top","code":""},{"path":"https://slinghub.github.io/lancer/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Linearity Assessment and Curve Explorer","text":"first create data set. curve_annot look like . curve_data look like . Merge data together using create_curve_table Summarise curve lipid batch summarise_curve_table Classify curve according Workflow 1 Workflow 2.wf1_group1 gives results Workflow 1wf2_group2 gives results Workflow 2 Back top","code":"library(lancer)  # Data Creation  dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150,   10, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_025a\",   \"Sample_040a\", \"Sample_050a\", \"Sample_060a\",   \"Sample_075a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_125a\", \"Sample_150a\",   \"Sample_010b\", \"Sample_025b\",   \"Sample_040b\", \"Sample_050b\", \"Sample_060b\",   \"Sample_075b\", \"Sample_080b\", \"Sample_100b\",   \"Sample_125b\", \"Sample_150b\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060,   5192648, 16594991, 32507833, 46499896,   55388856, 62505210, 62778078, 72158161,   78044338, 86158414 )  lipid2_area_linear <- c(   31538, 53709, 69990, 101977, 146436, 180960,   232881, 283780, 298289, 344519, 430432,   25463, 63387, 90624, 131274, 138069,   205353, 202407, 260205, 292257, 367924 )  lipid3_area_lod <- c(   544, 397, 829, 1437, 1808, 2231,   3343, 2915, 5268, 8031, 11045,   500, 903, 1267, 2031, 2100,   3563, 4500, 5300, 8500, 10430 )  lipid4_area_nonlinear <- c(   380519, 485372, 478770, 474467, 531640, 576301,   501068, 550201, 515110, 499543, 474745,   197417, 322846, 478398, 423174, 418577,   426089, 413292, 450190, 415309, 457618 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area_saturated,   Lipid2 = lipid2_area_linear,   Lipid3 = lipid3_area_lod,   Lipid4 = lipid4_area_nonlinear ) print(curve_annot, width = 100) #> # A tibble: 21 × 3 #>    Sample_Name Dilution_Batch_Name Dilution_Percent #>    <chr>       <chr>                          <dbl> #>  1 Sample_010a B1                                10 #>  2 Sample_020a B1                                20 #>  3 Sample_025a B1                                25 #>  4 Sample_040a B1                                40 #>  5 Sample_050a B1                                50 #>  6 Sample_060a B1                                60 #>  7 Sample_075a B1                                75 #>  8 Sample_080a B1                                80 #>  9 Sample_100a B1                               100 #> 10 Sample_125a B1                               125 #> # … with 11 more rows print(curve_data, width = 100) #> # A tibble: 21 × 5 #>    Sample_Name   Lipid1 Lipid2 Lipid3 Lipid4 #>    <chr>          <dbl>  <dbl>  <dbl>  <dbl> #>  1 Sample_010a  5748124  31538    544 380519 #>  2 Sample_020a 16616414  53709    397 485372 #>  3 Sample_025a 21702718  69990    829 478770 #>  4 Sample_040a 36191617 101977   1437 474467 #>  5 Sample_050a 49324541 146436   1808 531640 #>  6 Sample_060a 55618266 180960   2231 576301 #>  7 Sample_075a 66947588 232881   3343 501068 #>  8 Sample_080a 74964771 283780   2915 550201 #>  9 Sample_100a 75438063 298289   5268 515110 #> 10 Sample_125a 91770737 344519   8031 499543 #> # … with 11 more rows # Create curve table curve_table <- lancer::create_curve_table(   curve_annot = curve_annot,    curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" ) print(curve_table, width = 100) #> # A tibble: 84 × 5 #>    Sample_Name Dilution_Batch_Name Dilution_Percent Transition_Name     Area #>    <chr>       <chr>                          <dbl> <chr>              <dbl> #>  1 Sample_010a B1                                10 Lipid1           5748124 #>  2 Sample_010a B1                                10 Lipid2             31538 #>  3 Sample_010a B1                                10 Lipid3               544 #>  4 Sample_010a B1                                10 Lipid4            380519 #>  5 Sample_020a B1                                20 Lipid1          16616414 #>  6 Sample_020a B1                                20 Lipid2             53709 #>  7 Sample_020a B1                                20 Lipid3               397 #>  8 Sample_020a B1                                20 Lipid4            485372 #>  9 Sample_025a B1                                25 Lipid1          21702718 #> 10 Sample_025a B1                                25 Lipid2             69990 #> # … with 74 more rows # Create dilution statistical summary curve_summary <- lancer::summarise_curve_table(   curve_table = curve_table,   grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ),   conc_var = \"Dilution_Percent\",   signal_var = \"Area\" ) print(curve_summary, width = 100) #> # A tibble: 8 × 9 #>   Transition_Name Dilution_Batch_Name r_corr r2_linear r2_adj_linear #>   <chr>           <chr>                <dbl>     <dbl>         <dbl> #> 1 Lipid1          B1                   0.963    0.928        0.920   #> 2 Lipid2          B1                   0.990    0.980        0.978   #> 3 Lipid3          B1                   0.964    0.930        0.922   #> 4 Lipid4          B1                   0.311    0.0970      -0.00333 #> 5 Lipid1          B2                   0.950    0.903        0.890   #> 6 Lipid2          B2                   0.995    0.990        0.988   #> 7 Lipid3          B2                   0.978    0.956        0.951   #> 8 Lipid4          B2                   0.608    0.370        0.291   #>   mandel_stats mandel_p_val pra_linear concavity #>          <dbl>        <dbl>      <dbl>     <dbl> #> 1       71.2     0.0000297        70.5 -4174.    #> 2        2.53    0.150            92.8    -4.91  #> 3      106.      0.00000678       71.2     0.468 #> 4       13.2     0.00660        -251.    -20.5   #> 5       52.9     0.000166         62.3 -4137.    #> 6        0.868   0.382            94.3    -1.94  #> 7       20.9     0.00256          74.7     0.321 #> 8        5.39    0.0533          -73.1   -22.9 curve_classified <- lancer::evaluate_linearity(   dilution_summary = curve_summary,   grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ) ) print(curve_classified, width = 100) #> # A tibble: 8 × 11 #>   Transition_Name Dilution_Batch_Name wf1_group      wf2_group         r_corr #>   <chr>           <chr>               <chr>          <chr>              <dbl> #> 1 Lipid1          B1                  Poor Linearity Saturation Regime  0.963 #> 2 Lipid2          B1                  Good Linearity Good Linearity     0.990 #> 3 Lipid3          B1                  Poor Linearity Noise Regime       0.964 #> 4 Lipid4          B1                  Poor Linearity Poor Linearity     0.311 #> 5 Lipid1          B2                  Poor Linearity Saturation Regime  0.950 #> 6 Lipid2          B2                  Good Linearity Good Linearity     0.995 #> 7 Lipid3          B2                  Poor Linearity Noise Regime       0.978 #> 8 Lipid4          B2                  Poor Linearity Poor Linearity     0.608 #>   pra_linear mandel_p_val concavity r2_linear r2_adj_linear mandel_stats #>        <dbl>        <dbl>     <dbl>     <dbl>         <dbl>        <dbl> #> 1       70.5   0.0000297  -4174.       0.928        0.920         71.2   #> 2       92.8   0.150         -4.91     0.980        0.978          2.53  #> 3       71.2   0.00000678     0.468    0.930        0.922        106.    #> 4     -251.    0.00660      -20.5      0.0970      -0.00333       13.2   #> 5       62.3   0.000166   -4137.       0.903        0.890         52.9   #> 6       94.3   0.382         -1.94     0.990        0.988          0.868 #> 7       74.7   0.00256        0.321    0.956        0.951         20.9   #> 8      -73.1   0.0533       -22.9      0.370        0.291          5.39"},{"path":"https://slinghub.github.io/lancer/index.html","id":"output-results","dir":"","previous_headings":"","what":"Output Results","title":"Linearity Assessment and Curve Explorer","text":"Results can exported Excel via write_summary_excel  Results can plotted using add_ggplot_panel. create column called panel contains ggplot plots Use view_ggplot_pdf export plots pdf file   Results can also plotted using add_plotly_panel. create column called panel contains plotly plots. create interactive trelliscope display seen , columns must converted cognostics class. done using function convert_to_cog Use view_trellis_html R console output interactive trelliscope display  Back top","code":"lancer::write_summary_excel(   dilution_summary = curve_classified,    file_name = \"dilution_summary.xlsx\") ggplot_table <- lancer::add_ggplot_panel(   dilution_table = curve_table,   dilution_summary = curve_classified,   grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ),   dil_batch_var = \"Dilution_Batch_Name\",   dil_batch_col = c(\"#377eb8\", \"#4daf4a\"),   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\" )  # Get the list of ggplot list for each group ggplot_list <- ggplot_table$panel lancer::view_ggplot_pdf(   ggplot_list = ggplot_list,   filename = \"dilution_plot.pdf\",   ncol_per_page = 2,   nrow_per_page = 2 ) # Create a trellis table trellis_table <- lancer::add_plotly_panel(   dilution_table = curve_table,   dilution_summary = curve_classified,   grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ),   sample_name_var = \"Sample_Name\",   dil_batch_var = \"Dilution_Batch_Name\",   dil_batch_col = c(     \"#377eb8\",     \"#4daf4a\"   ),   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\",   have_plot_title = FALSE ) %>%   lancer::convert_to_cog(     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"),      panel_variable = \"panel\",     col_name_vec = \"col_name_vec\",     desc_vec = \"desc_vec\",     type_vec = \"type_vec\"   ) lancer::view_trellis_html(   trellis_table = trellis_table,   grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ),   trellis_report_name = \"Dilution_Plot\",   trellis_report_folder = \"Dilution_Plot_Folder\" )"},{"path":"https://slinghub.github.io/lancer/reference/add_ggplot_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Add A ggplot Panel Column — add_ggplot_panel","title":"Add A ggplot Panel Column — add_ggplot_panel","text":"Create column contains list ggplot suited pdf report","code":""},{"path":"https://slinghub.github.io/lancer/reference/add_ggplot_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add A ggplot Panel Column — add_ggplot_panel","text":"","code":"add_ggplot_panel(   dilution_table,   dilution_summary = NULL,   grouping_variable = c(\"Transition_Name\", \"Dilution_Batch_Name\"),   dil_batch_var = \"Dilution_Batch_Name\",   dil_batch_col = c(\"#377eb8\", \"#4daf4a\", \"#9C27B0\", \"#BCAAA4\", \"#FF8A65\", \"#EFBBCF\"),   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\",   have_plot_title = TRUE,   plot_summary_table = TRUE,   plot_first_half_lin_reg = FALSE,   plot_last_half_lin_reg = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/add_ggplot_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add A ggplot Panel Column — add_ggplot_panel","text":"dilution_table Output given function create_curve_table() long table format columns indicating least lipid/transition name, concentration signal. columns may present used group dilution curve together dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() can also generic data frame tibble. input given , program create one using function summarise_curve_table() evaluate_linearity() grouping_variable, conc_var signal_var inputs Default: NULL grouping_variable character vector column names dilution_tableto indicate dilution curve grouped , Default: c(\"Transition_Name\", \"Dilution_Batch_Name\") dil_batch_var Column name dilution_table indicate group name dilution batch, used colour points dilution plot Default: 'Dilution_Batch_Name' dil_batch_col vector colours used dilution batch group named given dil_batch_var, Default: c(\"#377eb8\", \"#4daf4a\", \"#9C27B0\", \"#BCAAA4\", \"#FF8A65\", \"#EFBBCF\") conc_var Column name dilution_table indicate concentration Default: 'Dilution_Percent' conc_var_units Unit measure conc_var, Default: '%' conc_var_interval Distance two tick labels dilution plot, Default: 50 signal_var Column name dilution_table indicate signal Default: 'Area' have_plot_title Indicate want plot title ggplot plot. Default: TRUE plot_summary_table Indicate want plot summary table ggplot plot. Default: TRUE plot_first_half_lin_reg Decide plot extra regression line best fits first half conc_var dilution points. Default: FALSE plot_last_half_lin_reg Decide plot extra regression line best fits last half conc_var dilution points. Default: FALSE","code":""},{"path":"https://slinghub.github.io/lancer/reference/add_ggplot_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add A ggplot Panel Column — add_ggplot_panel","text":"table columns grouping variable new column panel created containing ggplot dilution plot row. column used create plot figure pdf report.","code":""},{"path":"https://slinghub.github.io/lancer/reference/add_ggplot_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add A ggplot Panel Column — add_ggplot_panel","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150,   10, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\",   \"Sample_025a\", \"Sample_040a\", \"Sample_050a\",   \"Sample_060a\", \"Sample_075a\", \"Sample_080a\",   \"Sample_100a\", \"Sample_125a\", \"Sample_150a\",   \"Sample_010b\", \"Sample_025b\",   \"Sample_040b\", \"Sample_050b\", \"Sample_060b\",   \"Sample_075b\", \"Sample_080b\", \"Sample_100b\",   \"Sample_125b\", \"Sample_150b\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060,   5192648, 16594991, 32507833, 46499896,   55388856, 62505210, 62778078, 72158161,   78044338, 86158414 )  lipid2_area_linear <- c(   31538, 53709, 69990, 101977, 146436, 180960,   232881, 283780, 298289, 344519, 430432,   25463, 63387, 90624, 131274, 138069,   205353, 202407, 260205, 292257, 367924 )  lipid3_area_lod <- c(   544, 397, 829, 1437, 1808, 2231,   3343, 2915, 5268, 8031, 11045,   500, 903, 1267, 2031, 2100,   3563, 4500, 5300, 8500, 10430 )  lipid4_area_nonlinear <- c(   380519, 485372, 478770, 474467, 531640, 576301,   501068, 550201, 515110, 499543, 474745,   197417, 322846, 478398, 423174, 418577,   426089, 413292, 450190, 415309, 457618 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area_saturated,   Lipid2 = lipid2_area_linear,   Lipid3 = lipid3_area_lod,   Lipid4 = lipid4_area_nonlinear )  # Create curve table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Create curve statistical summary curve_summary <- curve_table %>%   summarise_curve_table(     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     conc_var = \"Dilution_Percent\",     signal_var = \"Area\"   ) %>%   dplyr::arrange(.data$Transition_Name) %>%   evaluate_linearity(grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ))  # Create a ggplot table ggplot_table <- add_ggplot_panel(   curve_table,   dilution_summary = curve_summary ) ggplot_list <- ggplot_table$panel  ggplot_list[[1]]   ggplot_list[[2]]   ggplot_list[[3]]"},{"path":"https://slinghub.github.io/lancer/reference/add_plotly_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Add A plotly Panel Column — add_plotly_panel","title":"Add A plotly Panel Column — add_plotly_panel","text":"Create column contains list plotly suited trelliscopejs` visualisation","code":""},{"path":"https://slinghub.github.io/lancer/reference/add_plotly_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add A plotly Panel Column — add_plotly_panel","text":"","code":"add_plotly_panel(   dilution_table,   dilution_summary = NULL,   grouping_variable = c(\"Transition_Name\", \"Dilution_Batch_Name\"),   sample_name_var = \"Sample_Name\",   dil_batch_var = \"Dilution_Batch_Name\",   dil_batch_col = c(\"#377eb8\", \"#4daf4a\", \"#9C27B0\", \"#BCAAA4\", \"#FF8A65\", \"#EFBBCF\"),   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\",   have_plot_title = FALSE,   plot_first_half_lin_reg = FALSE,   plot_last_half_lin_reg = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/add_plotly_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add A plotly Panel Column — add_plotly_panel","text":"dilution_table Output given function create_curve_table() long table format columns indicating least lipid/transition name, concentration signal. columns may present used group dilution curve together dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() can also generic data frame tibble Default: NULL grouping_variable character vector column names dilution_tableto indicate dilution curve grouped . also going used conditional cognostics trelliscopejs report. Default: c(\"Transition_Name\", \"Dilution_Batch_Name\") sample_name_var Column name dilution_table indicate sample name. used dilution plot Default: 'Sample_Name' dil_batch_var Column name dilution_table indicate group name dilution batch, used colour points dilution plot Default: 'Dilution_Batch_Name' dil_batch_col vector colours used dilution batch group named given dil_batch_var, Default: c(\"#377eb8\", \"#4daf4a\", \"#9C27B0\", \"#BCAAA4\", \"#FF8A65\", \"#EFBBCF\") conc_var Column name dilution_table indicate concentration Default: 'Dilution_Percent' conc_var_units Unit measure conc_var, Default: '%' conc_var_interval Distance two tick labels dilution plot, Default: 50 signal_var Column name dilution_table indicate signal Default: 'Area' have_plot_title Indicate want plot title plotly plot. Default: FALSE plot_first_half_lin_reg Decide plot extra regression line best fits first half conc_var dilution points. Default: FALSE plot_last_half_lin_reg Decide plot extra regression line best fits last half conc_var dilution points. Default: FALSE","code":""},{"path":"https://slinghub.github.io/lancer/reference/add_plotly_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add A plotly Panel Column — add_plotly_panel","text":"table suited trelliscopejs visualisation grouping variable columns converted conditional cognostics, columns dilution_summary converted cognostics new column panel created containing plotly dilution plot row. column used create plot figure trelliscopejs visualisation.","code":""},{"path":"https://slinghub.github.io/lancer/reference/add_plotly_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add A plotly Panel Column — add_plotly_panel","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150,   10, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\",   \"Sample_025a\", \"Sample_040a\", \"Sample_050a\",   \"Sample_060a\", \"Sample_075a\", \"Sample_080a\",   \"Sample_100a\", \"Sample_125a\", \"Sample_150a\",   \"Sample_010b\", \"Sample_025b\",   \"Sample_040b\", \"Sample_050b\", \"Sample_060b\",   \"Sample_075b\", \"Sample_080b\", \"Sample_100b\",   \"Sample_125b\", \"Sample_150b\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060,   5192648, 16594991, 32507833, 46499896,   55388856, 62505210, 62778078, 72158161,   78044338, 86158414 )  lipid2_area_linear <- c(   31538, 53709, 69990, 101977, 146436, 180960,   232881, 283780, 298289, 344519, 430432,   25463, 63387, 90624, 131274, 138069,   205353, 202407, 260205, 292257, 367924 )  lipid3_area_lod <- c(   544, 397, 829, 1437, 1808, 2231,   3343, 2915, 5268, 8031, 11045,   500, 903, 1267, 2031, 2100,   3563, 4500, 5300, 8500, 10430 )  lipid4_area_nonlinear <- c(   380519, 485372, 478770, 474467, 531640, 576301,   501068, 550201, 515110, 499543, 474745,   197417, 322846, 478398, 423174, 418577,   426089, 413292, 450190, 415309, 457618 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area_saturated,   Lipid2 = lipid2_area_linear,   Lipid3 = lipid3_area_lod,   Lipid4 = lipid4_area_nonlinear )  # Create curve table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Create curve statistical summary curve_summary <- curve_table %>%   summarise_curve_table(     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     conc_var = \"Dilution_Percent\",     signal_var = \"Area\"   ) %>%   dplyr::arrange(.data$Transition_Name) %>%   evaluate_linearity(grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ))  # Create a trellis table trellis_table <- add_plotly_panel(   curve_table,   dilution_summary = curve_summary )  plotly_list <- trellis_table$panel  plotly_list[[1]]  {\"x\":{\"visdat\":{\"7f153deb8d14\":[\"function () \",\"plotlyVisDat\"],\"7f155ebac46d\":[\"function () \",\"data\"],\"7f155df6903e\":[\"function () \",\"data\"],\"7f151fb406ce\":[\"function () \",\"data\"]},\"cur_data\":\"7f151fb406ce\",\"attrs\":{\"7f155ebac46d\":{\"x\":{},\"y\":{},\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":{},\"color\":{},\"colors\":[\"#377eb8\",\"#4daf4a\"],\"hoverinfo\":\"text\",\"text\":{},\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:  5748124.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area: 16616414.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area: 21702718.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area: 36191617.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area: 49324541.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area: 55618266.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area: 66947588.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area: 74964771.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area: 75438063.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area: 91770737.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 94692060.0\"],\"inherit\":false},\"7f155df6903e\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[16179335.4588101,22756010.8020595,29332686.1453089,35909361.4885584,42486036.8318078,49062712.1750572,55639387.5183066,62216062.8615561,68792738.2048055,75369413.5480549,81946088.8913044,88522764.2345538,95099439.5778032,101676114.921053,108252790.264302],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"inherit\":false},\"7f151fb406ce\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[5127314.59275678,16930014.3870099,27897887.5200471,38030933.9918685,47329153.802474,55792546.9518637,63421113.4400376,70214853.2669956,76173766.4327378,81297852.9372641,85587112.7805746,89041545.9626692,91661152.483548,93445932.3432109,94395885.541658],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"inherit\":false}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":{\"text\":\"\",\"x\":0.1},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Dilution_Percent (%)\",\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"tick0\":0,\"dtick\":50,\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"autorange\":true,\"fixedrange\":false,\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"exponentformat\":\"e\",\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"hovermode\":\"closest\",\"legend\":{\"orientation\":\"v\",\"font\":{\"size\":10}},\"paper_bgcolor\":\"rgb(255,255,255)\",\"plot_bgcolor\":\"rgb(229,229,229)\",\"showlegend\":true,\"annotations\":[{\"text\":\"Area\",\"x\":0,\"y\":1,\"xref\":\"paper\",\"yref\":\"paper\",\"xanchor\":\"right\",\"yanchor\":\"bottom\",\"showarrow\":false}]},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[10,20,25,40,50,60,75,80,100,125,150],\"y\":[5748124,16616414,21702718,36191617,49324541,55618266,66947588,74964771,75438063,91770737,94692060],\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(55,126,184,1)\",\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":\"B1\",\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\"],\"text\":[\"Sample_010a\",\"Sample_020a\",\"Sample_025a\",\"Sample_040a\",\"Sample_050a\",\"Sample_060a\",\"Sample_075a\",\"Sample_080a\",\"Sample_100a\",\"Sample_125a\",\"Sample_150a\"],\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:  5748124.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area: 16616414.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area: 21702718.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area: 36191617.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area: 49324541.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area: 55618266.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area: 66947588.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area: 74964771.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area: 75438063.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area: 91770737.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 94692060.0\"],\"textfont\":{\"color\":\"rgba(55,126,184,1)\"},\"error_y\":{\"color\":\"rgba(55,126,184,1)\"},\"error_x\":{\"color\":\"rgba(55,126,184,1)\"},\"line\":{\"color\":\"rgba(55,126,184,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[16179335.4588101,22756010.8020595,29332686.1453089,35909361.4885584,42486036.8318078,49062712.1750572,55639387.5183066,62216062.8615561,68792738.2048055,75369413.5480549,81946088.8913044,88522764.2345538,95099439.5778032,101676114.921053,108252790.264302],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[5127314.59275678,16930014.3870099,27897887.5200471,38030933.9918685,47329153.802474,55792546.9518637,63421113.4400376,70214853.2669956,76173766.4327378,81297852.9372641,85587112.7805746,89041545.9626692,91661152.483548,93445932.3432109,94395885.541658],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} plotly_list[[2]]  {\"x\":{\"visdat\":{\"7f152515af51\":[\"function () \",\"plotlyVisDat\"],\"7f1551623f28\":[\"function () \",\"data\"],\"7f15466615ba\":[\"function () \",\"data\"],\"7f15474912c0\":[\"function () \",\"data\"]},\"cur_data\":\"7f15474912c0\",\"attrs\":{\"7f1551623f28\":{\"x\":{},\"y\":{},\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":{},\"color\":{},\"colors\":[\"#377eb8\",\"#4daf4a\"],\"hoverinfo\":\"text\",\"text\":{},\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:  31538.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area:  53709.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area:  69990.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area: 101977.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area: 146436.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area: 180960.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area: 232881.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area: 283780.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area: 298289.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area: 344519.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 430432.0\"],\"inherit\":false},\"7f15466615ba\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[32557.049771167,61619.1850114416,90681.3202517162,119743.455491991,148805.590732265,177867.72597254,206929.861212815,235991.996453089,265054.131693364,294116.266933638,323178.402173913,352240.537414188,381302.672654462,410364.807894737,439426.943135011],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"inherit\":false},\"7f15474912c0\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[19564.1155739864,54770.0495482382,88994.5478188581,122237.610385846,154499.237249202,185779.428408926,216078.183865019,245395.503617479,273731.387666307,301085.836011504,327458.848653069,352850.425591001,377260.566825302,400689.272355971,423136.542183008],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"inherit\":false}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":{\"text\":\"\",\"x\":0.1},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Dilution_Percent (%)\",\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"tick0\":0,\"dtick\":50,\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"autorange\":true,\"fixedrange\":false,\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"exponentformat\":\"e\",\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"hovermode\":\"closest\",\"legend\":{\"orientation\":\"v\",\"font\":{\"size\":10}},\"paper_bgcolor\":\"rgb(255,255,255)\",\"plot_bgcolor\":\"rgb(229,229,229)\",\"showlegend\":true,\"annotations\":[{\"text\":\"Area\",\"x\":0,\"y\":1,\"xref\":\"paper\",\"yref\":\"paper\",\"xanchor\":\"right\",\"yanchor\":\"bottom\",\"showarrow\":false}]},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[10,20,25,40,50,60,75,80,100,125,150],\"y\":[31538,53709,69990,101977,146436,180960,232881,283780,298289,344519,430432],\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(55,126,184,1)\",\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":\"B1\",\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\"],\"text\":[\"Sample_010a\",\"Sample_020a\",\"Sample_025a\",\"Sample_040a\",\"Sample_050a\",\"Sample_060a\",\"Sample_075a\",\"Sample_080a\",\"Sample_100a\",\"Sample_125a\",\"Sample_150a\"],\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:  31538.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area:  53709.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area:  69990.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area: 101977.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area: 146436.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area: 180960.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area: 232881.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area: 283780.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area: 298289.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area: 344519.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 430432.0\"],\"textfont\":{\"color\":\"rgba(55,126,184,1)\"},\"error_y\":{\"color\":\"rgba(55,126,184,1)\"},\"error_x\":{\"color\":\"rgba(55,126,184,1)\"},\"line\":{\"color\":\"rgba(55,126,184,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[32557.049771167,61619.1850114416,90681.3202517162,119743.455491991,148805.590732265,177867.72597254,206929.861212815,235991.996453089,265054.131693364,294116.266933638,323178.402173913,352240.537414188,381302.672654462,410364.807894737,439426.943135011],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[19564.1155739864,54770.0495482382,88994.5478188581,122237.610385846,154499.237249202,185779.428408926,216078.183865019,245395.503617479,273731.387666307,301085.836011504,327458.848653069,352850.425591001,377260.566825302,400689.272355971,423136.542183008],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} plotly_list[[3]]  {\"x\":{\"visdat\":{\"7f15968a2de\":[\"function () \",\"plotlyVisDat\"],\"7f156d6e6ea7\":[\"function () \",\"data\"],\"7f1558e0e117\":[\"function () \",\"data\"],\"7f151a1a3e7a\":[\"function () \",\"data\"]},\"cur_data\":\"7f151a1a3e7a\",\"attrs\":{\"7f156d6e6ea7\":{\"x\":{},\"y\":{},\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":{},\"color\":{},\"colors\":[\"#377eb8\",\"#4daf4a\"],\"hoverinfo\":\"text\",\"text\":{},\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:   544.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area:   397.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area:   829.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area:  1437.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area:  1808.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area:  2231.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area:  3343.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area:  2915.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area:  5268.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area:  8031.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 11045.0\"],\"inherit\":false},\"7f1558e0e117\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[-730.498283752861,3.63741418764289,737.773112128147,1471.90881006865,2206.04450800915,2940.18020594966,3674.31590389016,4408.45160183066,5142.58729977117,5876.72299771167,6610.85869565217,7344.99439359268,8079.13009153318,8813.26578947368,9547.40148741419],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"inherit\":false},\"7f151a1a3e7a\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[508.068922168841,656.539556605937,898.566739455549,1234.15047071768,1663.29075039232,2185.98757847948,2802.24095497916,3512.05087989135,4315.41735321606,5212.34037495328,6202.81994510302,7286.85606366528,8464.44873064005,9735.59794602734,11100.3037098271],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"inherit\":false}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":{\"text\":\"\",\"x\":0.1},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Dilution_Percent (%)\",\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"tick0\":0,\"dtick\":50,\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"autorange\":true,\"fixedrange\":false,\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"exponentformat\":\"e\",\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"hovermode\":\"closest\",\"legend\":{\"orientation\":\"v\",\"font\":{\"size\":10}},\"paper_bgcolor\":\"rgb(255,255,255)\",\"plot_bgcolor\":\"rgb(229,229,229)\",\"showlegend\":true,\"annotations\":[{\"text\":\"Area\",\"x\":0,\"y\":1,\"xref\":\"paper\",\"yref\":\"paper\",\"xanchor\":\"right\",\"yanchor\":\"bottom\",\"showarrow\":false}]},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[10,20,25,40,50,60,75,80,100,125,150],\"y\":[544,397,829,1437,1808,2231,3343,2915,5268,8031,11045],\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(55,126,184,1)\",\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":\"B1\",\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\"],\"text\":[\"Sample_010a\",\"Sample_020a\",\"Sample_025a\",\"Sample_040a\",\"Sample_050a\",\"Sample_060a\",\"Sample_075a\",\"Sample_080a\",\"Sample_100a\",\"Sample_125a\",\"Sample_150a\"],\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:   544.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area:   397.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area:   829.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area:  1437.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area:  1808.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area:  2231.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area:  3343.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area:  2915.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area:  5268.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area:  8031.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 11045.0\"],\"textfont\":{\"color\":\"rgba(55,126,184,1)\"},\"error_y\":{\"color\":\"rgba(55,126,184,1)\"},\"error_x\":{\"color\":\"rgba(55,126,184,1)\"},\"line\":{\"color\":\"rgba(55,126,184,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[-730.498283752861,3.63741418764289,737.773112128147,1471.90881006865,2206.04450800915,2940.18020594966,3674.31590389016,4408.45160183066,5142.58729977117,5876.72299771167,6610.85869565217,7344.99439359268,8079.13009153318,8813.26578947368,9547.40148741419],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[508.068922168841,656.539556605937,898.566739455549,1234.15047071768,1663.29075039232,2185.98757847948,2802.24095497916,3512.05087989135,4315.41735321606,5212.34037495328,6202.81994510302,7286.85606366528,8464.44873064005,9735.59794602734,11100.3037098271],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Average Deviation From Linearity — calculate_adl","title":"Calculate Average Deviation From Linearity — calculate_adl","text":"Calculate average deviation linearity defined Kroll et. al. (2000) doi:10.5858/2000-124-1331-EOTEON","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Average Deviation From Linearity — calculate_adl","text":"","code":"calculate_adl(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Average Deviation From Linearity — calculate_adl","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Average Deviation From Linearity — calculate_adl","text":"average deviation linearity","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Average Deviation From Linearity — calculate_adl","text":"function return NA number dilution points less equal three","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Average Deviation From Linearity — calculate_adl","text":"Kroll, M. H., Praestgaard, J., Michaliszyn, E., & Styer, P. E. (2000). Evaluation extent nonlinearity reportable range studies. Archives pathology & laboratory medicine, 124(9), 1331–1338. doi:10.5858/2000-124-1331-EOTEON","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Average Deviation From Linearity — calculate_adl","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  adl_value <- calculate_adl(   dilution_data,   \"Dilution_Percent\", \"Area\" )  adl_value #> [1] 7.439765"},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl_kroll_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","title":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","text":"Calculate statistical test linearity Kroll et. al. (2000) doi:10.5858/2000-124-1331-EOTEON  using average deviation linearity","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl_kroll_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","text":"","code":"calculate_adl_kroll_test(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl_kroll_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl_kroll_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","text":"data frame statistical results Kroll et. al. (2000) doi:10.5858/2000-124-1331-EOTEON adl_kroll: Average deviation linearity defined Kroll et. al. (2000) doi:10.5858/2000-124-1331-EOTEON precision_on_percent_scale: Estimate precision percent scale. ratio estimated regression standard error best-fit polynomial estimated solution mean. uncorrected_critical_value: Critical value (Uncorrected) defined Kroll et. al. (2000) doi:10.5858/2000-124-1331-EOTEON corrected_critical_value: Critical value (Corrected) defined Hsieh et. al. (2008) doi:10.1080/10543400802071378 uncorrected_kroll_results: Indicate adl_kroll less uncorrected_critical_value FALSE, sufficient evidence reject hypothesis points linear. corrected_kroll_results: Indicate adl_kroll less corrected_critical_value FALSE, sufficient evidence reject hypothesis points linear. best_model Gives values linear, quadratic cubic indicate model \"best fit\" points. function compare_performance used determine best fit.","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl_kroll_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","text":"function return NA number dilution points less equal three.","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl_kroll_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","text":"Kroll, M. H., Praestgaard, J., Michaliszyn, E., & Styer, P. E. (2000). Evaluation extent nonlinearity reportable range studies. Archives pathology & laboratory medicine, 124(9), 1331–1338. doi:10.5858/2000-124-1331-EOTEON   Hsieh E., & Liu J. P. (2008). Statistical Evaluation Linearity Assay Validation Journal Biopharmaceutical Statistics, 18(4), 677–690. doi:10.1080/10543400802071378","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_adl_kroll_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Kroll's Linearity Test — calculate_adl_kroll_test","text":"","code":"# Data from Kroll's 2000 paper solution_number <- c(   1, 1, 2, 2, 3, 3, 4, 4,   5, 5, 6, 6, 7, 7 )  result <- c(   352, 348, 1009, 991, 1603, 1584, 3100, 3200,   4482, 4390, 5101, 5046, 5669, 5516 )  dilution_data <- data.frame(   Solution_Number = solution_number,   Result = result )  adl_result <- calculate_adl_kroll_test(   dilution_data,   \"Solution_Number\",   \"Result\" )  adl_result #> # A tibble: 1 × 7 #>   adl_kroll precision_on_percent_scale uncorre…¹ corre…² uncor…³ corre…⁴ best_…⁵ #>       <dbl>                      <dbl>     <dbl>   <dbl> <chr>   <chr>   <chr>   #> 1      8.63                       5.54      7.61    2.86 FALSE   FALSE   cubic   #> # … with abbreviated variable names ¹​uncorrected_critical_value, #> #   ²​corrected_critical_value, ³​uncorrected_kroll_results, #> #   ⁴​corrected_kroll_results, ⁵​best_model"},{"path":"https://slinghub.github.io/lancer/reference/calculate_column_max_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Column Maximum Character — calculate_column_max_char","title":"Calculate Column Maximum Character — calculate_column_max_char","text":"Calculate maximum number characters column input data frame tibble, including column name.","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_column_max_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Column Maximum Character — calculate_column_max_char","text":"","code":"calculate_column_max_char(dilution_summary)"},{"path":"https://slinghub.github.io/lancer/reference/calculate_column_max_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Column Maximum Character — calculate_column_max_char","text":"dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() can also generic data frame tibble","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_column_max_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Column Maximum Character — calculate_column_max_char","text":"numeric vector value indicated maximum number characters column input data frame tibble","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_column_max_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Column Maximum Character — calculate_column_max_char","text":"","code":"r_corr <- c(   0.951956, 0.948683, 0.978057, 0.976462,   0.970618, 0.969348, 0.343838, 0.383552 )  pra_linear <- c(   65.78711, 64.58687, 90.21257, 89.95473,   72.91220, 72.36528, -233.05949, -172.13659 )  mandel_p_val <- c(   2.899006e-07, 7.922290e-07, 2.903365e-01, 3.082930e-01,   3.195779e-08, 6.366588e-08, 3.634004e-02, 1.864090e-02 )  concavity <- c(   -4133.501328, -4146.745747, -3.350942, -3.393617,   0.3942824, 0.4012963, -19.9469621, -22.6144875 )  curve_summary <- data.frame(   r_corr = r_corr, pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  column_max_char <- calculate_column_max_char(curve_summary)  column_max_char #> [1]  8 10 12 12"},{"path":"https://slinghub.github.io/lancer/reference/calculate_concavity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Concavity — calculate_concavity","title":"Calculate Concavity — calculate_concavity","text":"Calculate concavity Dilution Quadratic Model","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_concavity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Concavity — calculate_concavity","text":"","code":"calculate_concavity(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/calculate_concavity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Concavity — calculate_concavity","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_concavity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Concavity — calculate_concavity","text":"concavity Dilution Quadratic Model","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_concavity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Concavity — calculate_concavity","text":"function return NA number dilution points less equal three","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_concavity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Concavity — calculate_concavity","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  concavity_value <- calculate_concavity(   dilution_data,   \"Dilution_Percent\", \"Area\" )  concavity_value #> [1] -4.089199"},{"path":"https://slinghub.github.io/lancer/reference/calculate_gof_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Linear Model's Goodness Of Fit — calculate_gof_linear","title":"Calculate Linear Model's Goodness Of Fit — calculate_gof_linear","text":"Calculate Goodness Fit Dilution Linear Model","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_gof_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Linear Model's Goodness Of Fit — calculate_gof_linear","text":"","code":"calculate_gof_linear(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/calculate_gof_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Linear Model's Goodness Of Fit — calculate_gof_linear","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_gof_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Linear Model's Goodness Of Fit — calculate_gof_linear","text":"tibble containing Goodness Fit measures linear model Goodness Fit measures Pearson correlation coefficient (R), R^2 adjusted R^2","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_gof_linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Linear Model's Goodness Of Fit — calculate_gof_linear","text":"function return tibble NA values number dilution points less equal three","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_gof_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Linear Model's Goodness Of Fit — calculate_gof_linear","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  dil_linear_gof <- calculate_gof_linear(   dilution_data,   \"Dilution_Percent\", \"Area\" )  dil_linear_gof #> # A tibble: 1 × 3 #>   r_corr r2_linear r2_adj_linear #>    <dbl>     <dbl>         <dbl> #> 1  0.956     0.913         0.892"},{"path":"https://slinghub.github.io/lancer/reference/calculate_mandel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mandel Fitting Test — calculate_mandel","title":"Calculate Mandel Fitting Test — calculate_mandel","text":"Calculate Mandel fitting test dilution data","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_mandel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mandel Fitting Test — calculate_mandel","text":"","code":"calculate_mandel(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/calculate_mandel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mandel Fitting Test — calculate_mandel","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_mandel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mandel Fitting Test — calculate_mandel","text":"tibble containing Mandel test statistics. values Mandel test value corresponding p value. information test can found https://link.springer.com/article/10.1007/s00769-002-0487-6","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_mandel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Mandel Fitting Test — calculate_mandel","text":"function return tibble NA values number dilution points less equal three.","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_mandel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mandel Fitting Test — calculate_mandel","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  mandel_result <- calculate_mandel(dilution_data, \"Dilution_Percent\", \"Area\")  mandel_result #> # A tibble: 1 × 2 #>   mandel_stats mandel_p_val #>          <dbl>        <dbl> #> 1         70.1      0.00357"},{"path":"https://slinghub.github.io/lancer/reference/calculate_pra_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Linear Model's Percent Residual Accuracy (PRA) — calculate_pra_linear","title":"Calculate Linear Model's Percent Residual Accuracy (PRA) — calculate_pra_linear","text":"Calculate Percent Residual Accuracy (PRA) Dilution Linear Model","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_pra_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Linear Model's Percent Residual Accuracy (PRA) — calculate_pra_linear","text":"","code":"calculate_pra_linear(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/calculate_pra_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Linear Model's Percent Residual Accuracy (PRA) — calculate_pra_linear","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_pra_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Linear Model's Percent Residual Accuracy (PRA) — calculate_pra_linear","text":"Percent Residual Accuracy (PRA) Dilution Linear Model. information value can found https://www.sciencedirect.com/science/article/abs/pii/S0039914018307549","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_pra_linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Linear Model's Percent Residual Accuracy (PRA) — calculate_pra_linear","text":"function return NA number dilution points less equal three","code":""},{"path":"https://slinghub.github.io/lancer/reference/calculate_pra_linear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Linear Model's Percent Residual Accuracy (PRA) — calculate_pra_linear","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  pra_value <- calculate_pra_linear(dilution_data, \"Dilution_Percent\", \"Area\")  pra_value #> [1] 66.43913"},{"path":"https://slinghub.github.io/lancer/reference/convert_to_cog.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert To Cognostics — convert_to_cog","title":"Convert To Cognostics — convert_to_cog","text":"Convert columns curve_summary trelliscopejs cognostics Trelliscope display","code":""},{"path":"https://slinghub.github.io/lancer/reference/convert_to_cog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert To Cognostics — convert_to_cog","text":"","code":"convert_to_cog(   curve_summary,   dilution_summary = lifecycle::deprecated(),   cog_df = NULL,   grouping_variable = c(\"Transition_Name\", \"Dilution_Batch_Name\"),   panel_variable = NULL,   col_name_vec = \"col_name_vec\",   desc_vec = \"desc_vec\",   type_vec = \"type_vec\" )"},{"path":"https://slinghub.github.io/lancer/reference/convert_to_cog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert To Cognostics — convert_to_cog","text":"curve_summary summary data frame tibble generated function summarise_curve_table() /evaluate_linearity(). dilution_summary dilution_summary renamed curve_summary. cog_df data frame tibble contains cognostics information input given cognostics information generated function create_default_cog_df() used. Default: NULL grouping_variable character vector column names curve_summaryto indicate dilution curve grouped . also going used conditional cognostics trelliscopejs report. Default: c(\"Transition_Name\", \"Dilution_Batch_Name\") panel_variable column name curve_summary converted panel Trelliscope display. Default: NULL col_name_vec Column name cog_df indicate columns curve_summary needs converted cognostics. Default: 'col_name_vec' desc_vec Column name cog_df indicate description cognostics define trelliscopejs::cog. Default: 'desc_vec' type_vec Column name cog_df indicate type cognostics define trelliscopejs::cog. Default: 'type_vec'","code":""},{"path":"https://slinghub.github.io/lancer/reference/convert_to_cog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert To Cognostics — convert_to_cog","text":"dilution summary table grouping variable columns converted conditional cognostics. columns curve_summary converted cognostics used trelliscopejs report.","code":""},{"path":"https://slinghub.github.io/lancer/reference/convert_to_cog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert To Cognostics — convert_to_cog","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150,   10, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\",   \"Sample_025a\", \"Sample_040a\", \"Sample_050a\",   \"Sample_060a\", \"Sample_075a\", \"Sample_080a\",   \"Sample_100a\", \"Sample_125a\", \"Sample_150a\",   \"Sample_010b\", \"Sample_025b\",   \"Sample_040b\", \"Sample_050b\", \"Sample_060b\",   \"Sample_075b\", \"Sample_080b\", \"Sample_100b\",   \"Sample_125b\", \"Sample_150b\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060,   5192648, 16594991, 32507833, 46499896,   55388856, 62505210, 62778078, 72158161,   78044338, 86158414 )  lipid2_area_linear <- c(   31538, 53709, 69990, 101977, 146436, 180960,   232881, 283780, 298289, 344519, 430432,   25463, 63387, 90624, 131274, 138069,   205353, 202407, 260205, 292257, 367924 )  lipid3_area_lod <- c(   544, 397, 829, 1437, 1808, 2231,   3343, 2915, 5268, 8031, 11045,   500, 903, 1267, 2031, 2100,   3563, 4500, 5300, 8500, 10430 )  lipid4_area_nonlinear <- c(   380519, 485372, 478770, 474467, 531640, 576301,   501068, 550201, 515110, 499543, 474745,   197417, 322846, 478398, 423174, 418577,   426089, 413292, 450190, 415309, 457618 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area_saturated,   Lipid2 = lipid2_area_linear,   Lipid3 = lipid3_area_lod,   Lipid4 = lipid4_area_nonlinear )  # Create curve table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Create curve statistical summary curve_summary <- curve_table %>%   summarise_curve_table(     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     conc_var = \"Dilution_Percent\",     signal_var = \"Area\"   ) %>%   dplyr::arrange(.data$Transition_Name) %>%   evaluate_linearity(grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ))  updated_summary <- convert_to_cog(curve_summary)  # Observe that the columns has been converted # to class cognostics curve_summary #> # A tibble: 8 × 11 #>   Transition_N…¹ Dilut…² wf1_g…³ wf2_g…⁴ r_corr pra_l…⁵ mande…⁶ concav…⁷ r2_li…⁸ #>   <chr>          <chr>   <chr>   <chr>    <dbl>   <dbl>   <dbl>    <dbl>   <dbl> #> 1 Lipid1         B1      Poor L… Satura…  0.963    70.5 2.97e-5 -4.17e+3  0.928  #> 2 Lipid1         B2      Poor L… Satura…  0.950    62.3 1.66e-4 -4.14e+3  0.903  #> 3 Lipid2         B1      Good L… Good L…  0.990    92.8 1.50e-1 -4.91e+0  0.980  #> 4 Lipid2         B2      Good L… Good L…  0.995    94.3 3.82e-1 -1.94e+0  0.990  #> 5 Lipid3         B1      Poor L… Noise …  0.964    71.2 6.78e-6  4.68e-1  0.930  #> 6 Lipid3         B2      Poor L… Noise …  0.978    74.7 2.56e-3  3.21e-1  0.956  #> 7 Lipid4         B1      Poor L… Poor L…  0.311  -251.  6.60e-3 -2.05e+1  0.0970 #> 8 Lipid4         B2      Poor L… Poor L…  0.608   -73.1 5.33e-2 -2.29e+1  0.370  #> # … with 2 more variables: r2_adj_linear <dbl>, mandel_stats <dbl>, and #> #   abbreviated variable names ¹​Transition_Name, ²​Dilution_Batch_Name, #> #   ³​wf1_group, ⁴​wf2_group, ⁵​pra_linear, ⁶​mandel_p_val, ⁷​concavity, ⁸​r2_linear  updated_summary #> # A tibble: 8 × 11 #>   Trans…¹ Dilut…² wf1_g…³ wf2_g…⁴ r_corr   pra_linear mandel_p_val concavity     #>   <cog>   <cog>   <cog>   <cog>   <cog>    <cog>      <cog>        <cog>         #> 1 Lipid1  B1      Poor L… Satura… 0.963362   70.49412 2.968599e-05 -4174.1333061 #> 2 Lipid1  B2      Poor L… Satura… 0.950007   62.30351 1.662149e-04 -4136.5254757 #> 3 Lipid2  B1      Good L… Good L… 0.989903   92.75456 1.501138e-01    -4.9071785 #> 4 Lipid2  B2      Good L… Good L… 0.994815   94.32046 3.824145e-01    -1.9381407 #> 5 Lipid3  B1      Poor L… Noise … 0.964252   71.18372 6.775079e-06     0.4677827 #> 6 Lipid3  B2      Poor L… Noise … 0.977958   74.69452 2.563269e-03     0.3206020 #> 7 Lipid4  B1      Poor L… Poor L… 0.311458 -251.44937 6.599208e-03   -20.5225862 #> 8 Lipid4  B2      Poor L… Poor L… 0.608365  -73.12451 5.331838e-02   -22.8704194 #> # … with 3 more variables: r2_linear <cog>, r2_adj_linear <cog>, #> #   mandel_stats <cog>, and abbreviated variable names ¹​Transition_Name, #> #   ²​Dilution_Batch_Name, ³​wf1_group, ⁴​wf2_group"},{"path":"https://slinghub.github.io/lancer/reference/create_char_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Cyclic Character Sequence — create_char_seq","title":"Create Cyclic Character Sequence — create_char_seq","text":"Create cyclic character sequence","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_char_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Cyclic Character Sequence — create_char_seq","text":"","code":"create_char_seq(group_name, output_length)"},{"path":"https://slinghub.github.io/lancer/reference/create_char_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Cyclic Character Sequence — create_char_seq","text":"group_name character vector input output_length length output sequence","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_char_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Cyclic Character Sequence — create_char_seq","text":"cyclic character sequence length output_length","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_char_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Cyclic Character Sequence — create_char_seq","text":"Taken https://community.rstudio.com/t/ fill---sequence--letters-based---given-order/88823/3","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_char_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Cyclic Character Sequence — create_char_seq","text":"","code":"group_name <- c(\"red\", \"green\", \"blue\")  create_char_seq(group_name, output_length = 2) #> [1] \"red\"   \"green\"  create_char_seq(group_name, output_length = 5) #> [1] \"red\"   \"green\" \"blue\"  \"red\"   \"green\""},{"path":"https://slinghub.github.io/lancer/reference/create_cubic_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Cubic Model — create_cubic_model","title":"Create Cubic Model — create_cubic_model","text":"wrapper create cubic model dilution data","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_cubic_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Cubic Model — create_cubic_model","text":"","code":"create_cubic_model(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/create_cubic_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Cubic Model — create_cubic_model","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_cubic_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Cubic Model — create_cubic_model","text":"linear model object stats:lm() formula signal_var ~ conc_var + (conc_var * conc_var * conc_var) data diltuion_data","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_cubic_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Cubic Model — create_cubic_model","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  cubic_model <- create_cubic_model(   dilution_data,   \"Dilution_Percent\",   \"Area\" )  cubic_model #>  #> Call: #> stats::lm(formula = cubic_formula, data = dilution_data) #>  #> Coefficients: #>                                               (Intercept)   #>                                                 1.502e+04   #>                                          Dilution_Percent   #>                                                 8.659e+02   #>                    I(Dilution_Percent * Dilution_Percent)   #>                                                -5.910e+00   #> I(Dilution_Percent * Dilution_Percent * Dilution_Percent)   #>                                                 1.096e-02   #>"},{"path":"https://slinghub.github.io/lancer/reference/create_curve_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Curve Table — create_curve_table","title":"Create Curve Table — create_curve_table","text":"Create Curve Table two data frame tibble inputs curve_annot curve_data_wide. input must least one common column. default common column names Sample_Name.","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_curve_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Curve Table — create_curve_table","text":"","code":"create_curve_table(   curve_annot,   curve_data_wide,   common_column = c(\"Sample_Name\"),   signal_var = \"Area\",   column_group = \"Transition_Name\" )"},{"path":"https://slinghub.github.io/lancer/reference/create_curve_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Curve Table — create_curve_table","text":"curve_annot data frame tibble contains information curve batch. column sample name present. curve_data_wide wide format data frame tibble contains Sample Name usually first column followed different curves. curve meant provide signal_var sample. common_column vector consisting common column names must found curve_annot curve_data_wide, Default: c(\"Sample_Name\") signal_var Value provided curve_data_wide curve used column name merged data converted long format, Default: 'Area' column_group Value used group curves curve_data_wide merged data converted long format, Default: 'Transition_Name'","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_curve_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Curve Table — create_curve_table","text":"data frame tibble long format","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_curve_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Curve Table — create_curve_table","text":"first merge curve_annot curve_data_wide via one common columns. Next convert data wide long format. Merging Sample Annotation data can done ","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_curve_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Curve Table — create_curve_table","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 40, 60, 80, 100,   10, 20, 40, 60, 80, 100 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_040a\",   \"Sample_060a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_010b\", \"Sample_020b\", \"Sample_040b\",   \"Sample_060b\", \"Sample_080b\", \"Sample_100b\" )  lipid1_area <- c(   22561, 31178, 39981, 48390, 52171, 53410,   32561, 41178, 49981, 58390, 62171, 63410 )  lipid2_area <- c(   2299075, 4136350, 7020062, 8922063, 9288742, 11365710,   2300075, 4137350, 7021062, 8923063, 9289742, 11366710 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area,   Lipid2 = lipid2_area )  # Create dilution table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  print(curve_table, width = 100) #> # A tibble: 24 × 5 #>    Sample_Name Dilution_Batch_Name Dilution_Percent Transition_Name    Area #>    <chr>       <chr>                          <dbl> <chr>             <dbl> #>  1 Sample_010a B1                                10 Lipid1            22561 #>  2 Sample_010a B1                                10 Lipid2          2299075 #>  3 Sample_020a B1                                20 Lipid1            31178 #>  4 Sample_020a B1                                20 Lipid2          4136350 #>  5 Sample_040a B1                                40 Lipid1            39981 #>  6 Sample_040a B1                                40 Lipid2          7020062 #>  7 Sample_060a B1                                60 Lipid1            48390 #>  8 Sample_060a B1                                60 Lipid2          8922063 #>  9 Sample_080a B1                                80 Lipid1            52171 #> 10 Sample_080a B1                                80 Lipid2          9288742 #> # … with 14 more rows"},{"path":"https://slinghub.github.io/lancer/reference/create_default_cog_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Default Cognostics Data Frame — create_default_cog_df","title":"Create Default Cognostics Data Frame — create_default_cog_df","text":"Create default cognostics data frame used convert columns curve_summary class cognostics","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_default_cog_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Default Cognostics Data Frame — create_default_cog_df","text":"","code":"create_default_cog_df()"},{"path":"https://slinghub.github.io/lancer/reference/create_default_cog_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Default Cognostics Data Frame — create_default_cog_df","text":"dataframe default cognostics information","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_default_cog_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Default Cognostics Data Frame — create_default_cog_df","text":"Internal function create dataframe default cognostics information used trelliscopejs::cog.","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_default_cog_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Default Cognostics Data Frame — create_default_cog_df","text":"","code":"cog_df <- create_default_cog_df() cog_df #>             col_name_vec                                    desc_vec type_vec #> 1        Transition_Name                             Transition_Name   factor #> 2    Dilution_Batch_Name                         Dilution_Batch_Name   factor #> 3  Transition_Name_Class                      Classes of Transitions   factor #> 4              wf1_group                       Group from workflow 1   factor #> 5              wf2_group                       Group from workflow 2   factor #> 6                 r_corr                Pearson Correlation R values  numeric #> 7             pra_linear Linear Regression Percent Residual Accuracy  numeric #> 8           mandel_p_val                    P values for Mandel test  numeric #> 9              r2_linear                 Linear Regression R^2 Value  numeric #> 10         r2_adj_linear        Linear Regression Adjusted R^2 Value  numeric #> 11          mandel_stats             Test statistics for Mandel Test  numeric #> 12             adl_value            Average Deviation from Linearity  numeric"},{"path":"https://slinghub.github.io/lancer/reference/create_dilution_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Dilution Table — create_dilution_table","title":"Create Dilution Table — create_dilution_table","text":"Create Dilution Table two data frame tibble inputs create_dilution_table renamed create_curve_table.","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_dilution_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Dilution Table — create_dilution_table","text":"","code":"create_dilution_table(   dilution_annot,   lipid_data_wide,   common_column = c(\"Sample_Name\"),   signal_var = \"Area\",   column_group = \"Transition_Name\" )"},{"path":"https://slinghub.github.io/lancer/reference/create_linear_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Linear Model — create_linear_model","title":"Create Linear Model — create_linear_model","text":"wrapper create linear model dilution data","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_linear_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Linear Model — create_linear_model","text":"","code":"create_linear_model(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/create_linear_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Linear Model — create_linear_model","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_linear_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Linear Model — create_linear_model","text":"linear model object stats:lm() formula signal_var ~ conc_var data diltuion_data","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_linear_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Linear Model — create_linear_model","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  linear_model <- create_linear_model(   dilution_data,   \"Dilution_Percent\",   \"Area\" )  linear_model #>  #> Call: #> stats::lm(formula = linear_formula, data = dilution_data) #>  #> Coefficients: #>      (Intercept)  Dilution_Percent   #>          23708.5             340.1   #>"},{"path":"https://slinghub.github.io/lancer/reference/create_page_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the page layout for the pdf document — create_page_layout","title":"Create the page layout for the pdf document — create_page_layout","text":"Get page layout pdf document based number plots display number columns rows","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_page_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the page layout for the pdf document — create_page_layout","text":"","code":"create_page_layout(number_of_plots, ncol = NULL, nrow = NULL)"},{"path":"https://slinghub.github.io/lancer/reference/create_page_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the page layout for the pdf document — create_page_layout","text":"number_of_plots Number plots output pdf document ncol Number columns plots allowed one page pdf document, Default: NULL nrow Number rows plots allowed one page pdf document, Default: NULL","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_page_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the page layout for the pdf document — create_page_layout","text":"list containing number rows cols required one pdf page","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_page_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create the page layout for the pdf document — create_page_layout","text":"ncol nrow NULL ncol NULL, layout one column total number rows number plots needs produce nrow NULL, layout one row total number columns number plots needs produce","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_page_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the page layout for the pdf document — create_page_layout","text":"","code":"create_page_layout(   number_of_plots = 4,   ncol = 2,   nrow = 2 ) #> $ncol #> [1] 2 #>  #> $nrow #> [1] 2 #>"},{"path":"https://slinghub.github.io/lancer/reference/create_quad_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Quadratic Model — create_quad_model","title":"Create Quadratic Model — create_quad_model","text":"wrapper create quadratic model dilution data","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_quad_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Quadratic Model — create_quad_model","text":"","code":"create_quad_model(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/create_quad_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Quadratic Model — create_quad_model","text":"dilution_data data frame tibble containing dilution data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_quad_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Quadratic Model — create_quad_model","text":"linear model object stats:lm() formula signal_var ~ conc_var + (conc_var * conc_var) data diltuion_data","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_quad_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Quadratic Model — create_quad_model","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  dilution_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  quad_model <- create_quad_model(   dilution_data,   \"Dilution_Percent\",   \"Area\" )  quad_model #>  #> Call: #> stats::lm(formula = quad_formula, data = dilution_data) #>  #> Coefficients: #>                            (Intercept)                        Dilution_Percent   #>                              15877.375                                 783.219   #> I(Dilution_Percent * Dilution_Percent)   #>                                 -4.089   #>"},{"path":"https://slinghub.github.io/lancer/reference/create_reg_col_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Colour Vector — create_reg_col_vec","title":"Create Regression Colour Vector — create_reg_col_vec","text":"Internal function create named vector indicate regression line colour","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_reg_col_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Colour Vector — create_reg_col_vec","text":"","code":"create_reg_col_vec(   plot_first_half_lin_reg = FALSE,   plot_last_half_lin_reg = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/create_reg_col_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Colour Vector — create_reg_col_vec","text":"plot_first_half_lin_reg Decide plot extra regression line best fits first half conc_var dilution points. Default: FALSE plot_last_half_lin_reg Decide plot extra regression line best fits last half conc_var dilution points. Default: FALSE","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_reg_col_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Colour Vector — create_reg_col_vec","text":"named vector linear regression named \"Lin\" given colour black. quadratic regression named \"Quad\" given colour red. linear regression first half dilution points named \"Lin First Half\" given colour blue. linear regression last half dilution points named \"Lin Last Half\" given colour purple.","code":""},{"path":"https://slinghub.github.io/lancer/reference/create_reg_col_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Colour Vector — create_reg_col_vec","text":"","code":"# Data Creation regression_colour_vector <- c(   plot_first_half_lin_reg = TRUE,   plot_last_half_lin_reg = TRUE )  regression_colour_vector #> plot_first_half_lin_reg  plot_last_half_lin_reg  #>                    TRUE                    TRUE"},{"path":"https://slinghub.github.io/lancer/reference/evaluate_linearity.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Linearity Based On Dilution Summary Data — evaluate_linearity","title":"Evaluate Linearity Based On Dilution Summary Data — evaluate_linearity","text":"Evaluate curve linear based dilution summary statistics","code":""},{"path":"https://slinghub.github.io/lancer/reference/evaluate_linearity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Linearity Based On Dilution Summary Data — evaluate_linearity","text":"","code":"evaluate_linearity(   dilution_summary,   grouping_variable = c(),   corrcoef_column = \"r_corr\",   corrcoef_min_threshold = 0.8,   pra_column = \"pra_linear\",   pra_min_threshold = 80,   mandel_p_val_column = \"mandel_p_val\",   mandel_p_val_threshold = 0.05,   concavity_column = \"concavity\" )"},{"path":"https://slinghub.github.io/lancer/reference/evaluate_linearity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Linearity Based On Dilution Summary Data — evaluate_linearity","text":"dilution_summary data frame tibble output function summarise_curve_data() grouping_variable character vector column names dilution_summaryto indicate columns placed first evaluation results. Default: c() corrcoef_column column dilution_summary holds correlation coefficient, Default: 'r_corr' corrcoef_min_threshold minimum threshold value curve's correlation coefficient pass potentially linear. Equality threshold considered pass, Default: 0.8 pra_column column dilution_summary holds percent residual accuracy, Default: 'pra_linear' pra_min_threshold minimum threshold value curve's percent residual accuracy pass potentially linear. Equality threshold considered pass, Default: 80 mandel_p_val_column column dilution_summary holds p value results Mandel's fitting test, Default: 'mandel_p_val' mandel_p_val_threshold threshold value curve's p value Mandel's fitting test reject hypothesis quadratic model fits better linear model. Default: 0.05 concavity_column column dilution_summary holds concavity quadratic model, Default: 'concavity'","code":""},{"path":"https://slinghub.github.io/lancer/reference/evaluate_linearity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Linearity Based On Dilution Summary Data — evaluate_linearity","text":"data frame tibble evaluation results","code":""},{"path":"https://slinghub.github.io/lancer/reference/evaluate_linearity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Linearity Based On Dilution Summary Data — evaluate_linearity","text":"Two work flows given evaluate linearity dilution curves. results highlighted columns wf1_group wf2_group now. Column names used categorise dilution curves moved front allow wf1_group wf2_group","code":""},{"path":"https://slinghub.github.io/lancer/reference/evaluate_linearity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Linearity Based On Dilution Summary Data — evaluate_linearity","text":"","code":"r_corr <- c(0.951956, 0.948683, 0.978057, 0.976462, 0.970618, 0.969348)  pra_linear <- c(65.78711, 64.58687, 90.21257, 89.95473, 72.91220, 72.36528)  mandel_p_val <- c(   2.899006e-07, 7.922290e-07, 2.903365e-01, 3.082930e-01,   3.195779e-08, 6.366588e-08 )  concavity <- c(   -4133.501328, -4146.745747, -3.350942, -3.393617,   0.3942824, 0.4012963 )  curve_summary <- data.frame(   r_corr = r_corr, pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  curve_summary <- evaluate_linearity(curve_summary)  print(curve_summary, width = 100) #>        wf1_group         wf2_group   r_corr pra_linear mandel_p_val     concavity #> 1 Poor Linearity Saturation Regime 0.951956   65.78711 2.899006e-07 -4133.5013280 #> 2 Poor Linearity Saturation Regime 0.948683   64.58687 7.922290e-07 -4146.7457470 #> 3 Good Linearity    Good Linearity 0.978057   90.21257 2.903365e-01    -3.3509420 #> 4 Good Linearity    Good Linearity 0.976462   89.95473 3.082930e-01    -3.3936170 #> 5 Poor Linearity      Noise Regime 0.970618   72.91220 3.195779e-08     0.3942824 #> 6 Poor Linearity      Noise Regime 0.969348   72.36528 6.366588e-08     0.4012963"},{"path":"https://slinghub.github.io/lancer/reference/format_char_cell_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Character Cell Colour — format_char_cell_colour","title":"Format Character Cell Colour — format_char_cell_colour","text":"Perform cell conditional formatting two colours based given word given character column dilution summary","code":""},{"path":"https://slinghub.github.io/lancer/reference/format_char_cell_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Character Cell Colour — format_char_cell_colour","text":"","code":"format_char_cell_colour(   workbook,   sheet,   dilution_summary,   conditional_column,   pass_criteria_words )"},{"path":"https://slinghub.github.io/lancer/reference/format_char_cell_colour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Character Cell Colour — format_char_cell_colour","text":"workbook workbook object openxlsx sheet name sheet apply conditional formatting workbook dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() conditional_column string indicate column dilution_summary use pass_criteria_words character vector highlight words must contain give passing colour cell.","code":""},{"path":"https://slinghub.github.io/lancer/reference/format_char_cell_colour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Character Cell Colour — format_char_cell_colour","text":"","code":"r_corr <- c(   0.951956, 0.948683, 0.978057, 0.976462,   0.970618, 0.969348, 0.343838, 0.383552 )  pra_linear <- c(   65.78711, 64.58687, 90.21257, 89.95473,   72.91220, 72.36528, -233.05949, -172.13659 )  mandel_p_val <- c(   2.899006e-07, 7.922290e-07, 2.903365e-01, 3.082930e-01,   3.195779e-08, 6.366588e-08, 3.634004e-02, 1.864090e-02 )  concavity <- c(   -4133.501328, -4146.745747, -3.350942, -3.393617,   0.3942824, 0.4012963, -19.9469621, -22.6144875 )  curve_summary <- data.frame(   r_corr = r_corr, pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  curve_summary <- mark_near_zero_columns(curve_summary)  # Create a new workbook my_workbook <- openxlsx::createWorkbook()  # Create a new worksheet openxlsx::addWorksheet(wb = my_workbook, sheetName = \"Curve Summary\")  # Write to worksheet as an Excel Table openxlsx::writeDataTable(   wb = my_workbook, sheet = \"Curve Summary\",   x = curve_summary,   withFilter = TRUE,   bandedRows = FALSE )  # Conditional formatting can only be done # after data is written to excel sheet format_char_cell_colour(   workbook = my_workbook, sheet = \"Curve Summary\",   dilution_summary = curve_summary,   conditional_column = \"wf1_group\",   pass_criteria_words = c(\"Good Linearity\") )"},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Numeric Cell Colour — format_num_cell_colour","title":"Format Numeric Cell Colour — format_num_cell_colour","text":"Perform cell conditional formatting two colours based given word given numeric column dilution summary","code":""},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Numeric Cell Colour — format_num_cell_colour","text":"","code":"format_num_cell_colour(   workbook,   sheet,   dilution_summary,   conditional_column,   threshold_value,   pass_criteria = c(\"above\", \"below\"),   pass_equality = TRUE )"},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_colour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Numeric Cell Colour — format_num_cell_colour","text":"workbook workbook object openxlsx sheet name sheet apply numeric style workbook dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() conditional_column character vector indicate column dilution_summary use threshold_value threshold value indicate pass fail pass_criteria indicate pass value threshold value, Default: c(\"\", \"\") pass_equality indicate equality threshold value considered pass fail, Default: TRUE","code":""},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_colour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Numeric Cell Colour — format_num_cell_colour","text":"","code":"r_corr <- c(   0.951956, 0.948683, 0.978057, 0.976462,   0.970618, 0.969348, 0.343838, 0.383552 )  pra_linear <- c(   65.78711, 64.58687, 90.21257, 89.95473,   72.91220, 72.36528, -233.05949, -172.13659 )  mandel_p_val <- c(   2.899006e-07, 7.922290e-07, 2.903365e-01, 3.082930e-01,   3.195779e-08, 6.366588e-08, 3.634004e-02, 1.864090e-02 )  concavity <- c(   -4133.501328, -4146.745747, -3.350942, -3.393617,   0.3942824, 0.4012963, -19.9469621, -22.6144875 )  curve_summary <- data.frame(   r_corr = r_corr, pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  curve_summary <- mark_near_zero_columns(curve_summary)  # Create a new workbook my_workbook <- openxlsx::createWorkbook()  # Create a new worksheet openxlsx::addWorksheet(wb = my_workbook, sheetName = \"Curve Summary\")  # Write to worksheet as an Excel Table openxlsx::writeDataTable(   wb = my_workbook, sheet = \"Curve Summary\",   x = curve_summary,   withFilter = TRUE,   bandedRows = FALSE )  # Conditional formatting can only be done # after data is written to excel sheet format_num_cell_colour(   workbook = my_workbook, sheet = \"Curve Summary\",   dilution_summary = curve_summary,   conditional_column = \"r_corr\",   threshold_value = \"0.8\",   pass_criteria = \"above\" )"},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Numeric Column Cell Style — format_num_cell_style","title":"Format Numeric Column Cell Style — format_num_cell_style","text":"Format numeric cell style based class columns. numeric, numeric format two decimal places. scientific, numeric format scientific form 0.00E+00.","code":""},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Numeric Column Cell Style — format_num_cell_style","text":"","code":"format_num_cell_style(dilution_summary, workbook, sheet)"},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Numeric Column Cell Style — format_num_cell_style","text":"dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() can also generic data frame tibble workbook workbook object openxlsx sheet name sheet apply numeric style workbook","code":""},{"path":"https://slinghub.github.io/lancer/reference/format_num_cell_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Numeric Column Cell Style — format_num_cell_style","text":"","code":"r_corr <- c(   0.951956, 0.948683, 0.978057, 0.976462,   0.970618, 0.969348, 0.343838, 0.383552 )  pra_linear <- c(   65.78711, 64.58687, 90.21257, 89.95473,   72.91220, 72.36528, -233.05949, -172.13659 )  mandel_p_val <- c(   2.899006e-07, 7.922290e-07, 2.903365e-01, 3.082930e-01,   3.195779e-08, 6.366588e-08, 3.634004e-02, 1.864090e-02 )  concavity <- c(   -4133.501328, -4146.745747, -3.350942, -3.393617,   0.3942824, 0.4012963, -19.9469621, -22.6144875 )  curve_summary <- data.frame(   r_corr = r_corr, pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  curve_summary <- mark_near_zero_columns(curve_summary)  # Create a new workbook my_workbook <- openxlsx::createWorkbook()  # Create a new worksheet openxlsx::addWorksheet(wb = my_workbook, sheetName = \"Curve Summary\") format_num_cell_style(curve_summary,   workbook = my_workbook, sheet = \"Curve Summary\" )"},{"path":"https://slinghub.github.io/lancer/reference/mark_near_zero_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark Near Zero Columns — mark_near_zero_columns","title":"Mark Near Zero Columns — mark_near_zero_columns","text":"Mark numeric columns near zero values dataset changing class numeric scientific","code":""},{"path":"https://slinghub.github.io/lancer/reference/mark_near_zero_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark Near Zero Columns — mark_near_zero_columns","text":"","code":"mark_near_zero_columns(dilution_summary, threshold_value = 0.01)"},{"path":"https://slinghub.github.io/lancer/reference/mark_near_zero_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark Near Zero Columns — mark_near_zero_columns","text":"dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() threshold_value small cut value numeric column number smaller value given class scientific Default: 0.01 can also generic data frame tibble","code":""},{"path":"https://slinghub.github.io/lancer/reference/mark_near_zero_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark Near Zero Columns — mark_near_zero_columns","text":"data frame tibble class numeric columns near zero values changed numeric scientific","code":""},{"path":"https://slinghub.github.io/lancer/reference/mark_near_zero_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mark Near Zero Columns — mark_near_zero_columns","text":"mark columns scientific openxlsx can output columns n scientific notations","code":""},{"path":"https://slinghub.github.io/lancer/reference/mark_near_zero_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark Near Zero Columns — mark_near_zero_columns","text":"","code":"r_corr <- c(   0.951956, 0.948683, 0.978057, 0.976462,   0.970618, 0.969348, 0.343838, 0.383552 )  pra_linear <- c(   65.78711, 64.58687, 90.21257, 89.95473,   72.91220, 72.36528, -233.05949, -172.13659 )  mandel_p_val <- c(   2.899006e-07, 7.922290e-07, 2.903365e-01, 3.082930e-01,   3.195779e-08, 6.366588e-08, 3.634004e-02, 1.864090e-02 )  concavity <- c(   -4133.501328, -4146.745747, -3.350942, -3.393617,   0.3942824, 0.4012963, -19.9469621, -22.6144875 )  curve_summary <- data.frame(   r_corr = r_corr, pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  curve_summary <- mark_near_zero_columns(curve_summary)  print(curve_summary, width = 100) #>     r_corr pra_linear mandel_p_val     concavity #> 1 0.951956   65.78711 2.899006e-07 -4133.5013280 #> 2 0.948683   64.58687 7.922290e-07 -4146.7457470 #> 3 0.978057   90.21257 2.903365e-01    -3.3509420 #> 4 0.976462   89.95473 3.082930e-01    -3.3936170 #> 5 0.970618   72.91220 3.195779e-08     0.3942824 #> 6 0.969348   72.36528 6.366588e-08     0.4012963 #> 7 0.343838 -233.05949 3.634004e-02   -19.9469621 #> 8 0.383552 -172.13659 1.864090e-02   -22.6144875"},{"path":"https://slinghub.github.io/lancer/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://slinghub.github.io/lancer/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dilution Curve Using ggplot2 — plot_curve_ggplot","title":"Plot Dilution Curve Using ggplot2 — plot_curve_ggplot","text":"Plot dilution curve using ggplot2","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dilution Curve Using ggplot2 — plot_curve_ggplot","text":"","code":"plot_curve_ggplot(   dilution_data,   dilution_summary_grp,   title,   pal,   dil_batch_var = \"Dilution_Batch_Name\",   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\",   plot_first_half_lin_reg = FALSE,   plot_last_half_lin_reg = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dilution Curve Using ggplot2 — plot_curve_ggplot","text":"dilution_data data frame tibble containing dilution data dilution_summary_grp data frame tibble containing dilution summary data one group title Title use dilution plot pal Input palette dilution batch group dil_batch_var. named char vector value colour name dilution batch group given dil_batch_var dil_batch_var Column name dilution_table indicate group name dilution batch, used colour points dilution plot Default: 'Dilution_Batch_Name' conc_var Column name dilution_table indicate concentration Default: 'Dilution_Percent' conc_var_units Unit measure conc_var, Default: '%' conc_var_interval Distance two tick labels dilution plot, Default: 50 signal_var Column name dilution_table indicate signal Default: 'Area' plot_first_half_lin_reg Decide plot extra regression line best fits first half conc_var dilution points. Default: FALSE plot_last_half_lin_reg Decide plot extra regression line best fits last half conc_var dilution points. Default: FALSE","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dilution Curve Using ggplot2 — plot_curve_ggplot","text":"Output ggplot dilution plot data one dilution batch per transition","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dilution Curve Using ggplot2 — plot_curve_ggplot","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\",   \"Sample_025a\", \"Sample_040a\", \"Sample_050a\",   \"Sample_060a\", \"Sample_075a\", \"Sample_080a\",   \"Sample_100a\", \"Sample_125a\", \"Sample_150a\" )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\" )  transition_name <- c(   \"Lipid1\", \"Lipid1\", \"Lipid1\", \"Lipid1\",   \"Lipid1\", \"Lipid1\", \"Lipid1\", \"Lipid1\",   \"Lipid1\", \"Lipid1\", \"Lipid1\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060 )  dilution_data <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent,   Transition_Name = transition_name,   Area = lipid1_area_saturated, )  grouping_variable <- c(\"Transition_Name\", \"Dilution_Batch_Name\")  # Get the dilution batch name from dilution_table dilution_batch_name <- dilution_batch_name %>%   unique() %>%   as.character()  dil_batch_col <- c(\"#377eb8\")  # Create palette for each dilution batch for plotting pal <- dil_batch_col %>%   stats::setNames(dilution_batch_name)  # Create dilution statistical summary dilution_summary_grp <- dilution_data %>%   summarise_curve_table(     grouping_variable = grouping_variable,     conc_var = \"Dilution_Percent\",     signal_var = \"Area\"   ) %>%   evaluate_linearity(grouping_variable = grouping_variable) %>%   dplyr::select(-c(dplyr::all_of(grouping_variable)))   # Create the ggplot p <- plot_curve_ggplot(dilution_data,   dilution_summary_grp = dilution_summary_grp,   title = \"Lipid_Saturated\",   pal = pal,   dil_batch_var = \"Dilution_Batch_Name\",   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\" )  p"},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dilution Curve Using plotly — plot_curve_plotly","title":"Plot Dilution Curve Using plotly — plot_curve_plotly","text":"Plot Dilution Data using plotly","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dilution Curve Using plotly — plot_curve_plotly","text":"","code":"plot_curve_plotly(   dilution_data,   title,   pal,   sample_name_var = \"Sample_Name\",   dil_batch_var = \"Dilution_Batch_Name\",   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\",   plot_first_half_lin_reg = FALSE,   plot_last_half_lin_reg = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dilution Curve Using plotly — plot_curve_plotly","text":"dilution_data data frame tibble containing dilution data title Title use dilution plot pal Input palette dilution batch group dil_batch_var. named char vector value colour name dilution batch group given dil_batch_var sample_name_var Column name dilution_data indicate sample name dil_batch_var Column name dilution_data indicate group name dilution batch, used colour points dilution plot conc_var Column name dilution_data indicate concentration conc_var_units Unit measure conc_var dilution plot conc_var_interval Distance two tick labels signal_var Column name dilution_data indicate signal plot_first_half_lin_reg Decide plot extra regression line best fits first half conc_var dilution points. Default: FALSE plot_last_half_lin_reg Decide plot extra regression line best fits last half conc_var dilution points. Default: FALSE","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dilution Curve Using plotly — plot_curve_plotly","text":"Output plotly dilution plot data one dilution batch per transition","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_curve_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dilution Curve Using plotly — plot_curve_plotly","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\",   \"Sample_025a\", \"Sample_040a\", \"Sample_050a\",   \"Sample_060a\", \"Sample_075a\", \"Sample_080a\",   \"Sample_100a\", \"Sample_125a\", \"Sample_150a\" )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060 )  dilution_data <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Percent = dilution_percent,   Area = lipid1_area_saturated,   Dilution_Batch_Name = dilution_batch_name )  # Get the dilution batch name from dilution_table dilution_batch_name <- dilution_batch_name %>%   unique() %>%   as.character()  dil_batch_col <- c(\"#377eb8\")  # Create palette for each dilution batch for plotting pal <- dil_batch_col %>%   stats::setNames(dilution_batch_name)  # Plot the html p <- plot_curve_plotly(dilution_data,   title = \"Lipid_Saturated\",   sample_name_var = \"Sample_Name\",   pal = pal,   dil_batch_var = \"Dilution_Batch_Name\",   conc_var = \"Dilution_Percent\",   conc_var_units = \"%\",   conc_var_interval = 50,   signal_var = \"Area\" )  p  {\"x\":{\"visdat\":{\"7f15b48200a\":[\"function () \",\"plotlyVisDat\"],\"7f15405f8bc0\":[\"function () \",\"data\"],\"7f1539ba584f\":[\"function () \",\"data\"],\"7f1523fff5d3\":[\"function () \",\"data\"]},\"cur_data\":\"7f1523fff5d3\",\"attrs\":{\"7f15405f8bc0\":{\"x\":{},\"y\":{},\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":{},\"color\":{},\"colors\":\"#377eb8\",\"hoverinfo\":\"text\",\"text\":{},\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:  5748124.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area: 16616414.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area: 21702718.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area: 36191617.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area: 49324541.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area: 55618266.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area: 66947588.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area: 74964771.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area: 75438063.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area: 91770737.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 94692060.0\"],\"inherit\":false},\"7f1539ba584f\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[16179335.4588101,22756010.8020595,29332686.1453089,35909361.4885584,42486036.8318078,49062712.1750572,55639387.5183066,62216062.8615561,68792738.2048055,75369413.5480549,81946088.8913044,88522764.2345538,95099439.5778032,101676114.921053,108252790.264302],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"inherit\":false},\"7f1523fff5d3\":{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[5127314.59275678,16930014.3870099,27897887.5200471,38030933.9918685,47329153.802474,55792546.9518637,63421113.4400376,70214853.2669956,76173766.4327378,81297852.9372641,85587112.7805746,89041545.9626692,91661152.483548,93445932.3432109,94395885.541658],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"inherit\":false}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":{\"text\":\"Lipid_Saturated\",\"x\":0.1},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Dilution_Percent (%)\",\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"tick0\":0,\"dtick\":50,\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"autorange\":true,\"fixedrange\":false,\"titlefont\":{\"size\":10},\"gridcolor\":\"rgb(255,255,255)\",\"showgrid\":true,\"showline\":false,\"showticklabels\":true,\"tickcolor\":\"rgb(127,127,127)\",\"ticks\":\"outside\",\"zeroline\":false,\"tickfont\":{\"size\":10},\"exponentformat\":\"e\",\"showspikes\":true,\"spikemode\":\"toaxis+marker\",\"spikesnap\":\"data\"},\"hovermode\":\"closest\",\"legend\":{\"orientation\":\"v\",\"font\":{\"size\":10}},\"paper_bgcolor\":\"rgb(255,255,255)\",\"plot_bgcolor\":\"rgb(229,229,229)\",\"showlegend\":true,\"annotations\":[{\"text\":\"Area\",\"x\":0,\"y\":1,\"xref\":\"paper\",\"yref\":\"paper\",\"xanchor\":\"right\",\"yanchor\":\"bottom\",\"showarrow\":false}]},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[10,20,25,40,50,60,75,80,100,125,150],\"y\":[5748124,16616414,21702718,36191617,49324541,55618266,66947588,74964771,75438063,91770737,94692060],\"type\":\"scattergl\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(55,126,184,1)\",\"size\":10,\"opacity\":1,\"line\":{\"color\":\"black\",\"width\":1.5}},\"name\":\"B1\",\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\",\"text\"],\"text\":[\"Sample_010a\",\"Sample_020a\",\"Sample_025a\",\"Sample_040a\",\"Sample_050a\",\"Sample_060a\",\"Sample_075a\",\"Sample_080a\",\"Sample_100a\",\"Sample_125a\",\"Sample_150a\"],\"hovertemplate\":[\"<b>Sample_010a<\\/b> <br>Dilution_Percent: 10 <br>Area:  5748124.0\",\"<b>Sample_020a<\\/b> <br>Dilution_Percent: 20 <br>Area: 16616414.0\",\"<b>Sample_025a<\\/b> <br>Dilution_Percent: 25 <br>Area: 21702718.0\",\"<b>Sample_040a<\\/b> <br>Dilution_Percent: 40 <br>Area: 36191617.0\",\"<b>Sample_050a<\\/b> <br>Dilution_Percent: 50 <br>Area: 49324541.0\",\"<b>Sample_060a<\\/b> <br>Dilution_Percent: 60 <br>Area: 55618266.0\",\"<b>Sample_075a<\\/b> <br>Dilution_Percent: 75 <br>Area: 66947588.0\",\"<b>Sample_080a<\\/b> <br>Dilution_Percent: 80 <br>Area: 74964771.0\",\"<b>Sample_100a<\\/b> <br>Dilution_Percent: 100 <br>Area: 75438063.0\",\"<b>Sample_125a<\\/b> <br>Dilution_Percent: 125 <br>Area: 91770737.0\",\"<b>Sample_150a<\\/b> <br>Dilution_Percent: 150 <br>Area: 94692060.0\"],\"textfont\":{\"color\":\"rgba(55,126,184,1)\"},\"error_y\":{\"color\":\"rgba(55,126,184,1)\"},\"error_x\":{\"color\":\"rgba(55,126,184,1)\"},\"line\":{\"color\":\"rgba(55,126,184,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[16179335.4588101,22756010.8020595,29332686.1453089,35909361.4885584,42486036.8318078,49062712.1750572,55639387.5183066,62216062.8615561,68792738.2048055,75369413.5480549,81946088.8913044,88522764.2345538,95099439.5778032,101676114.921053,108252790.264302],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"lin reg\",\"line\":{\"color\":\"black\",\"width\":1},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[10,20,30,40,50,60,70,80,90,100,110,120,130,140,150],\"y\":[5127314.59275678,16930014.3870099,27897887.5200471,38030933.9918685,47329153.802474,55792546.9518637,63421113.4400376,70214853.2669956,76173766.4327378,81297852.9372641,85587112.7805746,89041545.9626692,91661152.483548,93445932.3432109,94395885.541658],\"type\":\"scattergl\",\"mode\":\"lines\",\"name\":\"quad reg\",\"line\":{\"color\":\"red\",\"width\":1,\"opacity\":0.25},\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dilution Summary Table For One Group — plot_summary_table","title":"Plot Dilution Summary Table For One Group — plot_summary_table","text":"Plot dilution summary table one group","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dilution Summary Table For One Group — plot_summary_table","text":"","code":"plot_summary_table(dilution_summary_grp)"},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dilution Summary Table For One Group — plot_summary_table","text":"dilution_summary_grp one row data frame tibble containing dilution summary","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dilution Summary Table For One Group — plot_summary_table","text":"gridtable object consisting two tables. One plot_summary_table_char() plot_summary_table_num()","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dilution Summary Table For One Group — plot_summary_table","text":"","code":"wf1_group <- c(\"Poor Linearity\")  wf2_group <- c(\"Saturation\")  r_corr <- c(0.951956)  pra_linear <- c(65.78711)  mandel_p_val <- c(2.899006e-07)  concavity <- c(-4133.501328)  curve_summary_grp <- data.frame(   wf1_group = wf1_group,   wf2_group = wf2_group,   r_corr = r_corr,   pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  table <- plot_summary_table(curve_summary_grp)  grid::grid.draw(table)   # No column case curve_summary_grp <- data.frame()  table <- plot_summary_table(curve_summary_grp)  table #> NULL"},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dilution Summary Character Table For One Group — plot_summary_table_char","title":"Plot Dilution Summary Character Table For One Group — plot_summary_table_char","text":"Plot dilution summary character table one group batch","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dilution Summary Character Table For One Group — plot_summary_table_char","text":"","code":"plot_summary_table_char(dilution_summary_grp)"},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dilution Summary Character Table For One Group — plot_summary_table_char","text":"dilution_summary_grp one row data frame tibble containing dilution summary","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dilution Summary Character Table For One Group — plot_summary_table_char","text":"gridtable object consisting one table. first column column names dilution_summary_grp characters factors logical. second column corresponding values. character/factor/logical columns dilution_summary_grp, NULL returned","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dilution Summary Character Table For One Group — plot_summary_table_char","text":"","code":"wf1_group <- c(\"Poor Linearity\")  wf2_group <- c(\"Saturation\")  r_corr <- c(0.951956)  pra_linear <- c(65.78711)  mandel_p_val <- c(2.899006e-07)  concavity <- c(-4133.501328)  curve_summary_grp <- data.frame(   wf1_group = wf1_group,   wf2_group = wf2_group,   r_corr = r_corr,   pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  table <- plot_summary_table_char(curve_summary_grp)  grid::grid.draw(table)   # No character/factor/logical column case curve_summary_grp <- data.frame(r_corr = r_corr)  table <- plot_summary_table_char(curve_summary_grp)  table #> NULL"},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Dilution Summary Numeric Table For One Group — plot_summary_table_num","title":"Plot Dilution Summary Numeric Table For One Group — plot_summary_table_num","text":"Plot dilution Summary numeric table one group batch","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Dilution Summary Numeric Table For One Group — plot_summary_table_num","text":"","code":"plot_summary_table_num(dilution_summary_grp)"},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Dilution Summary Numeric Table For One Group — plot_summary_table_num","text":"dilution_summary_grp one row data frame tibble containing dilution summary","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Dilution Summary Numeric Table For One Group — plot_summary_table_num","text":"gridtable object consisting one table. first column column names dilution_summary_grp numeric. second column corresponding values. numeric columns dilution_summary_grp, NULL returned","code":""},{"path":"https://slinghub.github.io/lancer/reference/plot_summary_table_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Dilution Summary Numeric Table For One Group — plot_summary_table_num","text":"","code":"wf1_group <- c(\"Poor Linearity\")  wf2_group <- c(\"Saturation\")  r_corr <- c(0.951956)  pra_linear <- c(65.78711)  mandel_p_val <- c(2.899006e-07)  concavity <- c(-4133.501328)  curve_summary_grp <- data.frame(   wf1_group = wf1_group,   wf2_group = wf2_group,   r_corr = r_corr,   pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  table <- plot_summary_table_num(curve_summary_grp)  grid::grid.draw(table)   # No numeric column case curve_summary_grp <- data.frame(wf2_group = wf2_group)  table <- plot_summary_table_num(curve_summary_grp)  table #> NULL"},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Curve Data For One Group — summarise_curve_data","title":"Summarise Curve Data For One Group — summarise_curve_data","text":"Get summary statistics curve data one group batch","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Curve Data For One Group — summarise_curve_data","text":"","code":"summarise_curve_data(curve_data, conc_var, signal_var, details = FALSE)"},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Curve Data For One Group — summarise_curve_data","text":"curve_data data frame tibble containing curve data conc_var Column name curve_data indicate concentration signal_var Column name curve_data indicate signal details set TRUE, include columns curve summary mainly development testing.","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Curve Data For One Group — summarise_curve_data","text":"tibble containing Goodness Fit measures linear model Goodness Fit measures Pearson correlation coefficient (R), R^2, adjusted R^2, Bayesian Information Criterion (BIC), Pearson correlation p value, Mandel test statistics p value, Percent Residual Accuracy Concavity.","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise Curve Data For One Group — summarise_curve_data","text":"function return tibble NA values number curve points less equal three","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Curve Data For One Group — summarise_curve_data","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  curve_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  curve_summary <- summarise_curve_data(curve_data,                                       \"Dilution_Percent\",                                       \"Area\") print(curve_summary, width = 100) #> # A tibble: 1 × 7 #>   r_corr r2_linear r2_adj_linear mandel_stats mandel_p_val pra_linear concavity #>    <dbl>     <dbl>         <dbl>        <dbl>        <dbl>      <dbl>     <dbl> #> 1  0.956     0.913         0.892         70.1      0.00357       66.4     -4.09"},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Curve Table — summarise_curve_table","title":"Summarize Curve Table — summarise_curve_table","text":"Get summary statistics group curve table","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Curve Table — summarise_curve_table","text":"","code":"summarise_curve_table(   curve_table,   grouping_variable = c(\"Transition_Name\", \"Dilution_Batch_Name\"),   conc_var = \"Dilution_Percent\",   signal_var = \"Area\" )"},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Curve Table — summarise_curve_table","text":"curve_table Output given function create_curve_table() long table format columns indicating least curve name, concentration signal. columns may present used group curves together grouping_variable character vector column names curve_tableto indicate curve grouped . conc_var Column name curve_table indicate concentration Default: 'Dilution_Percent' signal_var Column name curve_table indicate signal Default: 'Area'","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Curve Table — summarise_curve_table","text":"curve summary table output function summarise_curve_data() group","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Curve Table — summarise_curve_table","text":"function first perform tidyr::nest curve_table based grouping_variable organise dilution curve data group. Next group, function summarise_curve_data() used get summary statistics.","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_curve_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Curve Table — summarise_curve_table","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 40, 60, 80, 100,   10, 20, 40, 60, 80, 100 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_040a\",   \"Sample_060a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_010b\", \"Sample_020b\", \"Sample_040b\",   \"Sample_060b\", \"Sample_080b\", \"Sample_100b\" )  lipid1_area <- c(   22561, 31178, 39981, 48390, 52171, 53410,   32561, 41178, 49981, 58390, 62171, 63410 )  lipid2_area <- c(   2299075, 4136350, 7020062, 8922063, 9288742, 11365710,   2300075, 4137350, 7021062, 8923063, 9289742, 11366710 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area,   Lipid2 = lipid2_area )  # Create curve table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Give summary result for each curve grouped by Transition_Name # and Dilution_Batch_Name curve_summary <- curve_table %>%   summarise_dilution_table(     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     conc_var = \"Dilution_Percent\",     signal_var = \"Area\"   ) #> Warning: `summarise_dilution_table()` was deprecated in lancer 0.0.6.9000. #> ℹ Please use `summarise_curve_table()` instead.  print(curve_summary, width = 100) #> # A tibble: 4 × 9 #>   Transition_Name Dilution_Batch_Name r_corr r2_linear r2_adj_linear #>   <chr>           <chr>                <dbl>     <dbl>         <dbl> #> 1 Lipid1          B1                   0.956     0.913         0.892 #> 2 Lipid2          B1                   0.972     0.946         0.932 #> 3 Lipid1          B2                   0.956     0.913         0.892 #> 4 Lipid2          B2                   0.972     0.946         0.932 #>   mandel_stats mandel_p_val pra_linear concavity #>          <dbl>        <dbl>      <dbl>     <dbl> #> 1        70.1       0.00357       66.4     -4.09 #> 2         5.67      0.0974        74.8   -735.   #> 3        70.1       0.00357       66.4     -4.09 #> 4         5.67      0.0974        74.8   -735."},{"path":"https://slinghub.github.io/lancer/reference/summarise_dilution_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Dilution Curve Data For One Group — summarise_dilution_data","title":"Summarise Dilution Curve Data For One Group — summarise_dilution_data","text":"Get summary statistics dilution data summarise_dilution_data renamed summarise_curve_data.","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_dilution_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Dilution Curve Data For One Group — summarise_dilution_data","text":"","code":"summarise_dilution_data(dilution_data, conc_var, signal_var, details = FALSE)"},{"path":"https://slinghub.github.io/lancer/reference/summarise_dilution_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Dilution Table — summarise_dilution_table","title":"Summarize Dilution Table — summarise_dilution_table","text":"Get summary statistics group dilution table summarise_dilution_table renamed summarise_curve_table.","code":""},{"path":"https://slinghub.github.io/lancer/reference/summarise_dilution_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Dilution Table — summarise_dilution_table","text":"","code":"summarise_dilution_table(   dilution_table,   grouping_variable = c(\"Transition_Name\", \"Dilution_Batch_Name\"),   conc_var = \"Dilution_Percent\",   signal_var = \"Area\" )"},{"path":"https://slinghub.github.io/lancer/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Cognostics Automatically — update_cog_auto","title":"Update Cognostics Automatically — update_cog_auto","text":"Update cognostics dilution summary based cognostics data frame given function create_default_cog_df.","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Cognostics Automatically — update_cog_auto","text":"","code":"update_cog_auto(curve_summary, dilution_summary = lifecycle::deprecated())"},{"path":"https://slinghub.github.io/lancer/reference/update_cog_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Cognostics Automatically — update_cog_auto","text":"curve_summary summary table generated function summarise_curve_table() /evaluate_linearity(). dilution_summary dilution_summary renamed curve_summary.","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Cognostics Automatically — update_cog_auto","text":"curve_summary columns converted type cog defined trelliscopejs::cog.","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_auto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Cognostics Automatically — update_cog_auto","text":"details trelliscopejs::cog can found https://rdrr.io/cran/trelliscopejs/man/cog.html.","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_auto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Cognostics Automatically — update_cog_auto","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150,   10, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\",   \"Sample_025a\", \"Sample_040a\", \"Sample_050a\",   \"Sample_060a\", \"Sample_075a\", \"Sample_080a\",   \"Sample_100a\", \"Sample_125a\", \"Sample_150a\",   \"Sample_010b\", \"Sample_025b\",   \"Sample_040b\", \"Sample_050b\", \"Sample_060b\",   \"Sample_075b\", \"Sample_080b\", \"Sample_100b\",   \"Sample_125b\", \"Sample_150b\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060,   5192648, 16594991, 32507833, 46499896,   55388856, 62505210, 62778078, 72158161,   78044338, 86158414 )  lipid2_area_linear <- c(   31538, 53709, 69990, 101977, 146436, 180960,   232881, 283780, 298289, 344519, 430432,   25463, 63387, 90624, 131274, 138069,   205353, 202407, 260205, 292257, 367924 )  lipid3_area_lod <- c(   544, 397, 829, 1437, 1808, 2231,   3343, 2915, 5268, 8031, 11045,   500, 903, 1267, 2031, 2100,   3563, 4500, 5300, 8500, 10430 )  lipid4_area_nonlinear <- c(   380519, 485372, 478770, 474467, 531640, 576301,   501068, 550201, 515110, 499543, 474745,   197417, 322846, 478398, 423174, 418577,   426089, 413292, 450190, 415309, 457618 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area_saturated,   Lipid2 = lipid2_area_linear,   Lipid3 = lipid3_area_lod,   Lipid4 = lipid4_area_nonlinear )  # Create curve table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Create curve statistical summary curve_summary <- curve_table %>%   summarise_curve_table(     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     conc_var = \"Dilution_Percent\",     signal_var = \"Area\"   ) %>%   dplyr::arrange(.data$Transition_Name) %>%   evaluate_linearity(grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ))  updated_summary <- update_cog_auto(curve_summary)  # Observe that the columns has been converted # to class cognostics curve_summary #> # A tibble: 8 × 11 #>   Transition_N…¹ Dilut…² wf1_g…³ wf2_g…⁴ r_corr pra_l…⁵ mande…⁶ concav…⁷ r2_li…⁸ #>   <chr>          <chr>   <chr>   <chr>    <dbl>   <dbl>   <dbl>    <dbl>   <dbl> #> 1 Lipid1         B1      Poor L… Satura…  0.963    70.5 2.97e-5 -4.17e+3  0.928  #> 2 Lipid1         B2      Poor L… Satura…  0.950    62.3 1.66e-4 -4.14e+3  0.903  #> 3 Lipid2         B1      Good L… Good L…  0.990    92.8 1.50e-1 -4.91e+0  0.980  #> 4 Lipid2         B2      Good L… Good L…  0.995    94.3 3.82e-1 -1.94e+0  0.990  #> 5 Lipid3         B1      Poor L… Noise …  0.964    71.2 6.78e-6  4.68e-1  0.930  #> 6 Lipid3         B2      Poor L… Noise …  0.978    74.7 2.56e-3  3.21e-1  0.956  #> 7 Lipid4         B1      Poor L… Poor L…  0.311  -251.  6.60e-3 -2.05e+1  0.0970 #> 8 Lipid4         B2      Poor L… Poor L…  0.608   -73.1 5.33e-2 -2.29e+1  0.370  #> # … with 2 more variables: r2_adj_linear <dbl>, mandel_stats <dbl>, and #> #   abbreviated variable names ¹​Transition_Name, ²​Dilution_Batch_Name, #> #   ³​wf1_group, ⁴​wf2_group, ⁵​pra_linear, ⁶​mandel_p_val, ⁷​concavity, ⁸​r2_linear  updated_summary #> # A tibble: 8 × 11 #>   Transition…¹ Dilut…² wf1_g…³ wf2_g…⁴ r_corr   pra_linear mandel_p_val concav…⁵ #>   <cog>        <cog>   <cog>   <cog>   <cog>    <cog>      <cog>           <dbl> #> 1 Lipid1       B1      Poor L… Satura… 0.963362   70.49412 2.968599e-05 -4.17e+3 #> 2 Lipid1       B2      Poor L… Satura… 0.950007   62.30351 1.662149e-04 -4.14e+3 #> 3 Lipid2       B1      Good L… Good L… 0.989903   92.75456 1.501138e-01 -4.91e+0 #> 4 Lipid2       B2      Good L… Good L… 0.994815   94.32046 3.824145e-01 -1.94e+0 #> 5 Lipid3       B1      Poor L… Noise … 0.964252   71.18372 6.775079e-06  4.68e-1 #> 6 Lipid3       B2      Poor L… Noise … 0.977958   74.69452 2.563269e-03  3.21e-1 #> 7 Lipid4       B1      Poor L… Poor L… 0.311458 -251.44937 6.599208e-03 -2.05e+1 #> 8 Lipid4       B2      Poor L… Poor L… 0.608365  -73.12451 5.331838e-02 -2.29e+1 #> # … with 3 more variables: r2_linear <cog>, r2_adj_linear <cog>, #> #   mandel_stats <cog>, and abbreviated variable names ¹​Transition_Name, #> #   ²​Dilution_Batch_Name, ³​wf1_group, ⁴​wf2_group, ⁵​concavity"},{"path":"https://slinghub.github.io/lancer/reference/update_cog_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Cognostics Manually — update_cog_manual","title":"Update Cognostics Manually — update_cog_manual","text":"Update cognostics curve_summary based cognostics parameters given cog_df. assume cog_df created manually","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Cognostics Manually — update_cog_manual","text":"","code":"update_cog_manual(   curve_summary,   dilution_summary = lifecycle::deprecated(),   cog_df = NULL,   col_name_vec = \"col_name_vec\",   desc_vec = \"desc_vec\",   type_vec = \"type_vec\" )"},{"path":"https://slinghub.github.io/lancer/reference/update_cog_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Cognostics Manually — update_cog_manual","text":"curve_summary summary data frame tibble generated function summarise_curve_table() /evaluate_linearity(). dilution_summary dilution_summary renamed curve_summary. cog_df data frame tibble contains cognostics information input given cognostics information generated function create_default_cog_df() used. Default: NULL col_name_vec Column name cog_df indicate columns curve_summary needs converted cognostics. Default: 'col_name_vec' desc_vec Column name cog_df indicate description cognostics define trelliscopejs::cog. Default: 'desc_vec' type_vec Column name cog_df indicate type cognostics define trelliscopejs::cog. Default: 'type_vec'","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Cognostics Manually — update_cog_manual","text":"curve_summary columns converted type cog defined trelliscopejs::cog.","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_manual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update Cognostics Manually — update_cog_manual","text":"details trelliscopejs::cog can found https://rdrr.io/cran/trelliscopejs/man/cog.html.","code":""},{"path":"https://slinghub.github.io/lancer/reference/update_cog_manual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Cognostics Manually — update_cog_manual","text":"","code":"# Data Creation dilution_percent <- c(   10, 20, 25, 40, 50, 60,   75, 80, 100, 125, 150,   10, 25, 40, 50, 60,   75, 80, 100, 125, 150 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\",   \"Sample_025a\", \"Sample_040a\", \"Sample_050a\",   \"Sample_060a\", \"Sample_075a\", \"Sample_080a\",   \"Sample_100a\", \"Sample_125a\", \"Sample_150a\",   \"Sample_010b\", \"Sample_025b\",   \"Sample_040b\", \"Sample_050b\", \"Sample_060b\",   \"Sample_075b\", \"Sample_080b\", \"Sample_100b\",   \"Sample_125b\", \"Sample_150b\" )  lipid1_area_saturated <- c(   5748124, 16616414, 21702718, 36191617,   49324541, 55618266, 66947588, 74964771,   75438063, 91770737, 94692060,   5192648, 16594991, 32507833, 46499896,   55388856, 62505210, 62778078, 72158161,   78044338, 86158414 )  lipid2_area_linear <- c(   31538, 53709, 69990, 101977, 146436, 180960,   232881, 283780, 298289, 344519, 430432,   25463, 63387, 90624, 131274, 138069,   205353, 202407, 260205, 292257, 367924 )  lipid3_area_lod <- c(   544, 397, 829, 1437, 1808, 2231,   3343, 2915, 5268, 8031, 11045,   500, 903, 1267, 2031, 2100,   3563, 4500, 5300, 8500, 10430 )  lipid4_area_nonlinear <- c(   380519, 485372, 478770, 474467, 531640, 576301,   501068, 550201, 515110, 499543, 474745,   197417, 322846, 478398, 423174, 418577,   426089, 413292, 450190, 415309, 457618 )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area_saturated,   Lipid2 = lipid2_area_linear,   Lipid3 = lipid3_area_lod,   Lipid4 = lipid4_area_nonlinear )  # Create dilution table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Create dilution statistical summary curve_summary <- curve_table %>%   summarise_curve_table(     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     conc_var = \"Dilution_Percent\",     signal_var = \"Area\"   ) %>%   dplyr::arrange(.data$Transition_Name) %>%   evaluate_linearity(grouping_variable = c(     \"Transition_Name\",     \"Dilution_Batch_Name\"   ))  # Create our own cog_df col_name_vec <- c(   \"Transition_Name\", \"Dilution_Batch_Name\",   \"Transition_Name_Class\" )  desc_vec <- c(   \"Transition_Name\", \"Dilution_Batch_Name\",   \"Transition_Name_Class\" )  type_vec <- c(\"factor\", \"factor\", \"factor\")  cog_df <- data.frame(   col_name_vec = col_name_vec,   desc_vec = desc_vec,   type_vec = type_vec )  updated_summary <- update_cog_manual(   curve_summary,   cog_df,   col_name_vec = \"col_name_vec\",   desc_vec = \"desc_vec\",   type_vec = \"type_vec\" ) #> Warning: The `dilution_summary` argument of `update_cog_manual()` is deprecated as of #> lancer 0.0.6.9000. #> ℹ Please use the `curve_summary` argument instead.  # Observe that the first two columns has been converted # to class cognostics curve_summary #> # A tibble: 8 × 11 #>   Transition_N…¹ Dilut…² wf1_g…³ wf2_g…⁴ r_corr pra_l…⁵ mande…⁶ concav…⁷ r2_li…⁸ #>   <chr>          <chr>   <chr>   <chr>    <dbl>   <dbl>   <dbl>    <dbl>   <dbl> #> 1 Lipid1         B1      Poor L… Satura…  0.963    70.5 2.97e-5 -4.17e+3  0.928  #> 2 Lipid1         B2      Poor L… Satura…  0.950    62.3 1.66e-4 -4.14e+3  0.903  #> 3 Lipid2         B1      Good L… Good L…  0.990    92.8 1.50e-1 -4.91e+0  0.980  #> 4 Lipid2         B2      Good L… Good L…  0.995    94.3 3.82e-1 -1.94e+0  0.990  #> 5 Lipid3         B1      Poor L… Noise …  0.964    71.2 6.78e-6  4.68e-1  0.930  #> 6 Lipid3         B2      Poor L… Noise …  0.978    74.7 2.56e-3  3.21e-1  0.956  #> 7 Lipid4         B1      Poor L… Poor L…  0.311  -251.  6.60e-3 -2.05e+1  0.0970 #> 8 Lipid4         B2      Poor L… Poor L…  0.608   -73.1 5.33e-2 -2.29e+1  0.370  #> # … with 2 more variables: r2_adj_linear <dbl>, mandel_stats <dbl>, and #> #   abbreviated variable names ¹​Transition_Name, ²​Dilution_Batch_Name, #> #   ³​wf1_group, ⁴​wf2_group, ⁵​pra_linear, ⁶​mandel_p_val, ⁷​concavity, ⁸​r2_linear  updated_summary #>            col_name_vec              desc_vec type_vec #> 1       Transition_Name       Transition_Name   factor #> 2   Dilution_Batch_Name   Dilution_Batch_Name   factor #> 3 Transition_Name_Class Transition_Name_Class   factor"},{"path":"https://slinghub.github.io/lancer/reference/validate_cog_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cognostics Data — validate_cog_df","title":"Validate Cognostics Data — validate_cog_df","text":"Validate Cognostics Data","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_cog_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cognostics Data — validate_cog_df","text":"","code":"validate_cog_df(   cog_df,   needed_column = c(\"col_name_vec\", \"desc_vec\", \"type_vec\") )"},{"path":"https://slinghub.github.io/lancer/reference/validate_cog_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Cognostics Data — validate_cog_df","text":"cog_df data frame tibble contains cognostics information needed_column vector consisting needed column names must found cog_df, Default: c(\"col_name_vec\", \"desc_vec\", \"type_vec\")","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_cog_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cognostics Data — validate_cog_df","text":"error things needed_column found Cognostics Data","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_cog_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Cognostics Data — validate_cog_df","text":"","code":"# Create Cognostics Dataframe col_name_vec <- c(\"Transition_Name\", \"Dilution_Batch_Name\")  desc_vec <- c(\"Transition_Name\", \"Dilution_Batch_Name\")  type_vec <- c(\"factor\", \"factor\")  cog_df <- data.frame(   col_name_vec = col_name_vec,   desc_vec = desc_vec,   type_vec = type_vec )  validate_cog_df(cog_df)"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_annot.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Curve Annotation — validate_curve_annot","title":"Validate Curve Annotation — validate_curve_annot","text":"Validate Curve Annotation","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_annot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Curve Annotation — validate_curve_annot","text":"","code":"validate_curve_annot(curve_annot, needed_column = c(\"Sample_Name\"))"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_annot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Curve Annotation — validate_curve_annot","text":"curve_annot data frame tibble contains information curve batch. column sample name present. needed_column vector consisting needed column names must found curve_annot, Default: c(\"Sample_Name\")","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_annot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Curve Annotation — validate_curve_annot","text":"error things needed_column found Dilution Data","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_annot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Curve Annotation — validate_curve_annot","text":"","code":"dilution_percent <- c(   10, 20, 40, 60, 80, 100,   10, 20, 40, 60, 80, 100 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_040a\",   \"Sample_060a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_010b\", \"Sample_020b\", \"Sample_040b\",   \"Sample_060b\", \"Sample_080b\", \"Sample_100b\" )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  validate_curve_annot(   curve_annot = curve_annot,   needed_column = c(\"Sample_Name\") )"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Curve Data — validate_curve_data","title":"Validate Curve Data — validate_curve_data","text":"Validate Curve Data","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Curve Data — validate_curve_data","text":"","code":"validate_curve_data(curve_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Curve Data — validate_curve_data","text":"curve_data data frame tibble containing curve data conc_var Column name dilution_data indicate concentration signal_var Column name dilution_data indicate signal","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Curve Data — validate_curve_data","text":"error column name found curve_data","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Curve Data — validate_curve_data","text":"","code":"dilution_percent <- c(10, 20, 40, 60, 80, 100)  area <- c(22561, 31178, 39981, 48390, 52171, 53410)  curve_data <- data.frame(Dilution_Percent = dilution_percent, Area = area)  validate_curve_data(   curve_data = curve_data,   conc_var = \"Dilution_Percent\",   signal_var = \"Area\" )"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Curve Data Wide — validate_curve_data_wide","title":"Validate Curve Data Wide — validate_curve_data_wide","text":"Validate Curve Data wide form","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Curve Data Wide — validate_curve_data_wide","text":"","code":"validate_curve_data_wide(curve_data_wide, needed_column = c(\"Sample_Name\"))"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Curve Data Wide — validate_curve_data_wide","text":"curve_data_wide wide format data frame tibble contains Sample Name usually first column followed different curves. curve meant provide signal_var sample. needed_column vector consisting needed column names must found curve_data_wide, Default: c(\"Sample_Name\")","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Curve Data Wide — validate_curve_data_wide","text":"error things needed_column found Lipid Data wide form","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_data_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Curve Data Wide — validate_curve_data_wide","text":"","code":"sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_040a\",   \"Sample_060a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_010b\", \"Sample_020b\", \"Sample_040b\",   \"Sample_060b\", \"Sample_080b\", \"Sample_100b\" )  lipid1_area <- c(   22561, 31178, 39981, 48390, 52171, 53410,   32561, 41178, 49981, 58390, 62171, 63410 )  lipid2_area <- c(   2299075, 4136350, 7020062, 8922063, 9288742, 11365710,   2300075, 4137350, 7021062, 8923063, 9289742, 11366710 )  curve_data_wide <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area,   Lipid2 = lipid2_area )  validate_curve_data_wide(   curve_data_wide = curve_data_wide,   needed_column = c(\"Sample_Name\") )"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Curve Table — validate_curve_table","title":"Validate Curve Table — validate_curve_table","text":"Validate Curve Table","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Curve Table — validate_curve_table","text":"","code":"validate_curve_table(   curve_table,   needed_column = c(\"Transition_Name\", \"Dilution_Batch_Name\", \"Dilution_Percent\", \"Area\") )"},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Curve Table — validate_curve_table","text":"curve_table curve table containing data curve points, variables group curve points together additional annotations curve points needed_column vector consisting needed column names must found curve_table, Default: c(\"Transition_Name\", \"Dilution_Batch_Name\", \"Dilution_Percent\", \"Area\")","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Curve Table — validate_curve_table","text":"error things needed_column found curve_table","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_curve_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Curve Table — validate_curve_table","text":"","code":"dilution_percent <- c(   10, 20, 40, 60, 80, 100,   10, 20, 40, 60, 80, 100 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  lipid1_area <- c(   22561, 31178, 39981, 48390, 52171, 53410,   32561, 41178, 49981, 58390, 62171, 63410 )  transition_name <- c(   \"Lipid1\", \"Lipid1\", \"Lipid1\",   \"Lipid1\", \"Lipid1\", \"Lipid1\",   \"Lipid1\", \"Lipid1\", \"Lipid1\",   \"Lipid1\", \"Lipid1\", \"Lipid1\" )  curve_table <- tibble::tibble(   Transition_Name = transition_name,   Dilution_Batch_Name = dilution_batch_name,   Area = lipid1_area,   Dilution_Percent = dilution_percent )  validate_curve_table(   curve_table = curve_table,   needed_column = c(     \"Transition_Name\",     \"Dilution_Batch_Name\",     \"Dilution_Percent\",     \"Area\"   ) )"},{"path":"https://slinghub.github.io/lancer/reference/validate_dilution_annot.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Dilution Annotation — validate_dilution_annot","title":"Validate Dilution Annotation — validate_dilution_annot","text":"Validate Dilution Annotation validate_dilution_annot renamed validate_curve_annot.","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_dilution_annot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Dilution Annotation — validate_dilution_annot","text":"","code":"validate_dilution_annot(dilution_annot, needed_column = c(\"Sample_Name\"))"},{"path":"https://slinghub.github.io/lancer/reference/validate_dilution_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Dilution Data — validate_dilution_data","title":"Validate Dilution Data — validate_dilution_data","text":"Validate Dilution Data validate_dilution_data renamed validate_curve_data.","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_dilution_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Dilution Data — validate_dilution_data","text":"","code":"validate_dilution_data(dilution_data, conc_var, signal_var)"},{"path":"https://slinghub.github.io/lancer/reference/validate_dilution_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Dilution Table — validate_dilution_table","title":"Validate Dilution Table — validate_dilution_table","text":"Validate Dilution Table validate_dilution_table renamed validate_curve_table.","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_dilution_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Dilution Table — validate_dilution_table","text":"","code":"validate_dilution_table(   dilution_table,   needed_column = c(\"Transition_Name\", \"Dilution_Batch_Name\", \"Dilution_Percent\", \"Area\") )"},{"path":"https://slinghub.github.io/lancer/reference/validate_lipid_data_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Lipid Data Wide — validate_lipid_data_wide","title":"Validate Lipid Data Wide — validate_lipid_data_wide","text":"Validate Lipid Data wide form validate_lipid_data_wide renamed validate_curve_data_wide.","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_lipid_data_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Lipid Data Wide — validate_lipid_data_wide","text":"","code":"validate_lipid_data_wide(lipid_data_wide, needed_column = c(\"Sample_Name\"))"},{"path":"https://slinghub.github.io/lancer/reference/validate_trellis_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Trellis Table — validate_trellis_table","title":"Validate Trellis Table — validate_trellis_table","text":"Validate trellis table see can used create trelliscopejs report","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_trellis_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Trellis Table — validate_trellis_table","text":"","code":"validate_trellis_table(   trellis_table,   grouping_variable = c(\"Transition_Name\", \"Dilution_Batch_Name\"),   panel_variable = \"panel\" )"},{"path":"https://slinghub.github.io/lancer/reference/validate_trellis_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Trellis Table — validate_trellis_table","text":"trellis_table trellis table generated function add_plotly_panel() grouping_variable character vector column names trellis_table indicate dilution curve grouped . also going used conditional cognostics trelliscopejs report. function check columns indeed conditional cognostics Default: c(\"Transition_Name\", \"Dilution_Batch_Name\") panel_variable column name trellis_table indicate list plots used trelliscopejs report. column name must fixed name panel must class trelliscope_panels Default: 'panel'","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_trellis_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Trellis Table — validate_trellis_table","text":"valid trellis table must column named panel list plots class trelliscope_panels, conditional cognostics columns indicated grouping_variable rest columns common cognostics","code":""},{"path":"https://slinghub.github.io/lancer/reference/validate_trellis_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Trellis Table — validate_trellis_table","text":"","code":"sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_040a\",   \"Sample_060a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_010b\", \"Sample_020b\", \"Sample_040b\",   \"Sample_060b\", \"Sample_080b\", \"Sample_100b\" )  lipid1_area <- c(   22561, 31178, 39981, 48390, 52171, 53410,   32561, 41178, 49981, 58390, 62171, 63410 )  lipid2_area <- c(   2299075, 4136350, 7020062, 8922063, 9288742, 11365710,   2300075, 4137350, 7021062, 8923063, 9289742, 11366710 )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area,   Lipid2 = lipid2_area )  dilution_percent <- c(   10, 20, 40, 60, 80, 100,   10, 20, 40, 60, 80, 100 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  # Create dilution table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Create a trellis table without dilution summary trellis_table_auto <- add_plotly_panel(curve_table) %>%   convert_to_cog(     cog_df = NULL,     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     panel_variable = \"panel\",     col_name_vec = \"col_name_vec\",     desc_vec = \"desc_vec\",     type_vec = \"type_vec\"   )  # Check if trellis_table_auto is valid validate_trellis_table(trellis_table_auto)"},{"path":"https://slinghub.github.io/lancer/reference/view_ggplot_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"View ggplot Dilution Plots As Pdf — view_ggplot_pdf","title":"View ggplot Dilution Plots As Pdf — view_ggplot_pdf","text":"View ggplot dilution plots pdf file","code":""},{"path":"https://slinghub.github.io/lancer/reference/view_ggplot_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View ggplot Dilution Plots As Pdf — view_ggplot_pdf","text":"","code":"view_ggplot_pdf(   ggplot_list,   filename = \"dilution_plot.pdf\",   ncol_per_page = 2,   nrow_per_page = 2,   width = 15,   height = 8,   testing = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/view_ggplot_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View ggplot Dilution Plots As Pdf — view_ggplot_pdf","text":"ggplot_list list plots arranged grid pdf page. list plot can created via function add_ggplot_panel(). function create data frame tibble column name \"panel\" contain list plots. filename File name pdf document, Default: 'dilution_plot.pdf' ncol_per_page Number columns plots allowed one page pdf document Default: 2 nrow_per_page Number rows plots allowed one page pdf document Default: 2 width width one pdf page, Default: 15 height height one pdf page, Default: 8 testing indicate running test, , pdf report given Default: FALSE","code":""},{"path":"https://slinghub.github.io/lancer/reference/view_ggplot_pdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View ggplot Dilution Plots As Pdf — view_ggplot_pdf","text":"","code":"sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_040a\",   \"Sample_060a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_010b\", \"Sample_020b\", \"Sample_040b\",   \"Sample_060b\", \"Sample_080b\", \"Sample_100b\" )  lipid1_area <- c(   22561, 31178, 39981, 48390, 52171, 53410,   32561, 41178, 49981, 58390, 62171, 63410 )  lipid2_area <- c(   2299075, 4136350, 7020062, 8922063, 9288742, 11365710,   2300075, 4137350, 7021062, 8923063, 9289742, 11366710 )  curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area,   Lipid2 = lipid2_area )  dilution_percent <- c(   10, 20, 40, 60, 80, 100,   10, 20, 40, 60, 80, 100 )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" )  curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent )  # Create dilution table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" )  # Create a ggplot table without dilution summary ggplot_table_auto <- add_ggplot_panel(curve_table)  # Get the list of ggplot list for each group ggplot_list <- ggplot_table_auto$panel  # Create a pdf report, set testing = FALSE to output results pdf_page_list <- view_ggplot_pdf(ggplot_list, testing = TRUE)"},{"path":"https://slinghub.github.io/lancer/reference/view_trellis_html.html","id":null,"dir":"Reference","previous_headings":"","what":"View ggplot or plotly Dilution Plots As Trellis — view_trellis_html","title":"View ggplot or plotly Dilution Plots As Trellis — view_trellis_html","text":"View ggplot plotly dilution plots trelliscope html report","code":""},{"path":"https://slinghub.github.io/lancer/reference/view_trellis_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View ggplot or plotly Dilution Plots As Trellis — view_trellis_html","text":"","code":"view_trellis_html(   trellis_table,   trellis_report_name = \"Dilution_Plot\",   trellis_report_folder = \"Dilution_Plot\",   grouping_variable = c(\"Transition_Name\", \"Dilution_Batch_Name\"),   panel_variable = \"panel\",   trellis_additional_labels = c(),   testing = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/view_trellis_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View ggplot or plotly Dilution Plots As Trellis — view_trellis_html","text":"trellis_table trellis table generated function add_ggplot_panel() convert_to_cog() add_plotly_panel() convert_to_cog() trellis_report_name string indicate title trellis report Default: 'Dilution_Plot' trellis_report_folder string indicate output folder plots found panel_variable Default: 'Dilution_Plot' grouping_variable character vector column names trellis_table indicate dilution curve grouped . also going used conditional cognostics trelliscopejs report. function check columns indeed conditional cognostics Default: c(\"Transition_Name\", \"Dilution_Batch_Name\") panel_variable column name trellis_table indicate list plots used trelliscopejs report. column name must fixed name panel must class trelliscope_panels Default: 'panel' trellis_additional_labels character vector columns names trellis_table display trellis report addition conditional cognostics grouping varaible, Default: c() testing indicate running test, , trellis report given Default: FALSE","code":""},{"path":"https://slinghub.github.io/lancer/reference/view_trellis_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View ggplot or plotly Dilution Plots As Trellis — view_trellis_html","text":"","code":"sample_name <- c(   \"Sample_010a\", \"Sample_020a\", \"Sample_040a\",   \"Sample_060a\", \"Sample_080a\", \"Sample_100a\",   \"Sample_010b\", \"Sample_020b\", \"Sample_040b\",   \"Sample_060b\", \"Sample_080b\", \"Sample_100b\" ) lipid1_area <- c(   22561, 31178, 39981, 48390, 52171, 53410,   32561, 41178, 49981, 58390, 62171, 63410 ) lipid2_area <- c(   2299075, 4136350, 7020062, 8922063, 9288742, 11365710,   2300075, 4137350, 7021062, 8923063, 9289742, 11366710 ) curve_data <- tibble::tibble(   Sample_Name = sample_name,   Lipid1 = lipid1_area,   Lipid2 = lipid2_area ) dilution_percent <- c(   10, 20, 40, 60, 80, 100,   10, 20, 40, 60, 80, 100 ) dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\", \"B2\", \"B2\" ) curve_annot <- tibble::tibble(   Sample_Name = sample_name,   Dilution_Batch_Name = dilution_batch_name,   Dilution_Percent = dilution_percent ) # Create dilution table curve_table <- create_curve_table(   curve_annot = curve_annot,   curve_data_wide = curve_data,   common_column = \"Sample_Name\",   signal_var = \"Area\",   column_group = \"Transition_Name\" ) # Add a plotly panel without dilution summary trellis_table_auto <- add_plotly_panel(curve_table) %>%   convert_to_cog(     cog_df = NULL,     grouping_variable = c(       \"Transition_Name\",       \"Dilution_Batch_Name\"     ),     panel_variable = \"panel\",     col_name_vec = \"col_name_vec\",     desc_vec = \"desc_vec\",     type_vec = \"type_vec\"   )  # Create a trellis report, set testing = FALSE to output results view_trellis_html(trellis_table_auto, testing = TRUE)"},{"path":"https://slinghub.github.io/lancer/reference/write_summary_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Dilution Summary To Excel — write_summary_excel","title":"Write Dilution Summary To Excel — write_summary_excel","text":"Write dilution summary table excel sheet","code":""},{"path":"https://slinghub.github.io/lancer/reference/write_summary_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Dilution Summary To Excel — write_summary_excel","text":"","code":"write_summary_excel(   dilution_summary,   file_name,   sheet_name = \"Dilution Summary\",   corrcoef_column = \"r_corr\",   corrcoef_min_threshold = 0.8,   pra_column = \"pra_linear\",   pra_min_threshold = 80,   mandel_p_val_column = \"mandel_p_val\",   mandel_p_val_threshold = 0.05,   workflow1_column = \"wf1_group\",   workflow2_column = \"wf2_group\",   pass_criteria_words = c(\"Good Linearity\"),   testing = FALSE )"},{"path":"https://slinghub.github.io/lancer/reference/write_summary_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Dilution Summary To Excel — write_summary_excel","text":"dilution_summary summary table generated function summarise_curve_table() /evaluate_linearity() file_name Name excel file sheet_name Sheet name output results Excel, Default: 'Dilution Summary' corrcoef_column column dilution_summary holds correlation coefficient, Default: 'r_corr' corrcoef_min_threshold minimum threshold value curve's correlation coefficient pass potentially linear. pass colour excel cell green red otherwise. Equality threshold considered pass, Default: 0.8 pra_column column dilution_summary holds percent residual accuracy, Default: 'pra_linear' pra_min_threshold minimum threshold value curve's percent residual accuracy pass potentially linear. pass colour excel cell green red otherwise. Equality threshold considered pass, Default: 80 mandel_p_val_column column dilution_summary holds p value results Mandel's fitting test. Default: 'mandel_p_val' mandel_p_val_threshold threshold value curve's p value Mandel's fitting test reject hypothesis quadratic model fits better linear model. value less value, cell colour red. Cell colour green p value equal threshold. Default: 0.05 workflow1_column column dilution_summary holds evaluation results workflow 1, Default: 'wf1_group' workflow2_column column dilution_summary holds evaluation results workflow 2, Default: 'wf2_group' pass_criteria_words character vector indicate words workflow1_column workflow2_column excel cell coloured green rest red. Default: c(\"Good Linearity\") testing indicate running test, , excel file given ","code":""},{"path":"https://slinghub.github.io/lancer/reference/write_summary_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Dilution Summary To Excel — write_summary_excel","text":"","code":"transition_name <- c(   \"Lipid1\", \"Lipid1\", \"Lipid1\", \"Lipid1\",   \"Lipid2\", \"Lipid2\", \"Lipid2\", \"Lipid2\" )  dilution_batch_name <- c(   \"B1\", \"B1\", \"B1\", \"B1\",   \"B2\", \"B2\", \"B2\", \"B2\" )  wf1_group <- c(   \"Poor Linearity\", \"Good Linearity\",   \"Poor Linearity\", \"Poor Linearity\",   \"Poor Linearity\", \"Good Linearity\",   \"Poor Linearity\", \"Poor Linearity\" )  wf2_group <- c(   \"Saturation\", \"Good Linearity\",   \"LOD\", \"Poor Linearity\",   \"Saturation\", \"Good Linearity\",   \"LOD\", \"Poor Linearity\" )  r_corr <- c(   0.951956, 0.948683, 0.978057, 0.976462,   0.970618, 0.969348, 0.343838, 0.383552 )  pra_linear <- c(   65.78711, 64.58687, 90.21257, 89.95473,   72.91220, 72.36528, -233.05949, -172.13659 )  mandel_p_val <- c(   2.899006e-07, 7.922290e-07, 2.903365e-01, 3.082930e-01,   3.195779e-08, 6.366588e-08, 3.634004e-02, 1.864090e-02 )  concavity <- c(   -4133.501328, -4146.745747, -3.350942, -3.393617,   0.3942824, 0.4012963, -19.9469621, -22.6144875 )  curve_summary <- data.frame(   Transition_Name = transition_name,   Dilution_Batch_Name = dilution_batch_name,   wf1_group = wf1_group, wf2_group = wf2_group,   r_corr = r_corr, pra_linear = pra_linear,   mandel_p_val = mandel_p_val,   concavity = concavity )  # Create an excel report, set testing = FALSE to output results write_summary_excel(curve_summary,   file_name = \"dilution_summary.xlsx\",   testing = TRUE )"},{"path":[]},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"todo-0-0-6-9000","dir":"Changelog","previous_headings":"","what":"TODO","title":"lancer 0.0.6.9000 (development version)","text":"Change lancer functions dilution curve","code":""},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"completed-0-0-6-9000","dir":"Changelog","previous_headings":"","what":"Completed","title":"lancer 0.0.6.9000 (development version)","text":"validate_dilution_annot changed validate_curve_annot. validate_dilution_table changed validate_curve_table. validate_dilution_data changed validate_curve_data. validate_lipid_data_wide changed validate_curve_data_wide. create_dilution_table changed create_curve_table. summarise_dilution_data changed summarise_curve_data. summarise_dilution_table changed summarise_curve_table. dilution_summary argument update_cog_manual changed curve_summary dilution_summary argument update_cog_auto changed curve_summary dilution_summary argument convert_to_cog changed curve_summary","code":""},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"lancer-006","dir":"Changelog","previous_headings":"","what":"lancer 0.0.6","title":"lancer 0.0.6","text":"Change characterisation LOD curves LOD Noise Regime. Change characterisation Saturation curves Saturation Saturation Regime.","code":""},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"lancer-005","dir":"Changelog","previous_headings":"","what":"lancer 0.0.5","title":"lancer 0.0.5","text":"Change R package name lancer. Use actions/checkout@v3 GitHub Actions files. Add alternate text documentation.","code":""},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"lancer-004","dir":"Changelog","previous_headings":"","what":"lancer 0.0.4","title":"lancer 0.0.4","text":"Fix issue r_corr calculate_gof_linear gives named numeric vector. Change code suit changes highlighted tidyselect 1.2.0 . Use actions/checkout@v3 actions/cache@v3 R-CMD-check.yaml file","code":""},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"lancer-003","dir":"Changelog","previous_headings":"","what":"lancer 0.0.3","title":"lancer 0.0.3","text":"Add hex sticker logo package. Correct README ensure add_ggplot_panel function correctly used. Fix issue add_ggplot_panel add_plotly_panel function users key dil_batch_var also grouping variable. Fix issue view_trellis_html display plots input grouping variable vector length one.","code":""},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"lancer-002","dir":"Changelog","previous_headings":"","what":"lancer 0.0.2","title":"lancer 0.0.2","text":"Changed output excel sheet font “Consolas” number “0” letter “O” can differentiated easily. cognostics.R, function convert_to_cog, add code ensure logical columns converted character columns logical column turn NA trelliscopejs::as_cognostics applied.","code":""},{"path":"https://slinghub.github.io/lancer/news/index.html","id":"lancer-001","dir":"Changelog","previous_headings":"","what":"lancer 0.0.1","title":"lancer 0.0.1","text":"Added NEWS.md file track changes package. Aim create tag version.","code":""}]
